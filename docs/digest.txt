Directory structure:
└── monogame-nightrunner/
    ├── Taskfile.yml
    ├── monogame-nightrunner.sln
    ├── port.ps1
    ├── .windsurfrules
    ├── Content/
    │   ├── Content.mgcb
    │   ├── Textures/
    │   ├── bin/
    │   │   └── DesktopGL/
    │   │       └── Content/
    │   └── obj/
    │       └── DesktopGL/
    │           └── net8.0/
    │               └── Content/
    │                   └── .mgstats
    ├── CreateTestTexture/
    │   ├── CreateTestTexture.csproj
    │   ├── Program.cs
    │   └── obj/
    │       ├── CreateTestTexture.csproj.nuget.dgspec.json
    │       ├── CreateTestTexture.csproj.nuget.g.props
    │       ├── CreateTestTexture.csproj.nuget.g.targets
    │       ├── project.assets.json
    │       └── project.nuget.cache
    ├── NightRunner/
    │   ├── Game1.cs
    │   ├── Icon.bmp
    │   ├── Program.cs
    │   ├── app.manifest
    │   ├── nightrunner.csproj
    │   ├── bin/
    │   │   └── Debug/
    │   │       └── net9.0/
    │   │           ├── nightrunner.deps.json
    │   │           ├── nightrunner.runtimeconfig.json
    │   │           └── runtimes/
    │   │               ├── android-arm/
    │   │               │   └── native/
    │   │               ├── android-arm64/
    │   │               │   └── native/
    │   │               ├── android-x64/
    │   │               │   └── native/
    │   │               ├── android-x86/
    │   │               │   └── native/
    │   │               ├── ios-arm64/
    │   │               │   └── native/
    │   │               ├── iossimulator-arm64/
    │   │               │   └── native/
    │   │               ├── iossimulator-x64/
    │   │               │   └── native/
    │   │               ├── linux-x64/
    │   │               │   └── native/
    │   │               │       └── libSDL2-2.0.so.0
    │   │               ├── osx/
    │   │               │   └── native/
    │   │               └── win-x64/
    │   │                   └── native/
    │   ├── obj/
    │   │   ├── nightrunner.csproj.nuget.dgspec.json
    │   │   ├── nightrunner.csproj.nuget.g.props
    │   │   ├── nightrunner.csproj.nuget.g.targets
    │   │   ├── project.assets.json
    │   │   ├── project.nuget.cache
    │   │   └── Debug/
    │   │       └── net9.0/
    │   │           ├── NightRunner.AssemblyInfo.cs
    │   │           ├── NightRunner.AssemblyInfoInputs.cache
    │   │           ├── NightRunner.GeneratedMSBuildEditorConfig.editorconfig
    │   │           ├── NightRunner.GlobalUsings.g.cs
    │   │           ├── NightRunner.assets.cache
    │   │           ├── NightRunner.csproj.AssemblyReference.cache
    │   │           ├── nightrun.94946BAE.Up2Date
    │   │           ├── nightrunner.csproj.CoreCompileInputs.cache
    │   │           ├── nightrunner.genruntimeconfig.cache
    │   │           ├── nightrunner.sourcelink.json
    │   │           ├── .NETCoreApp,Version=v9.0.AssemblyAttributes.cs
    │   │           ├── ref/
    │   │           └── refint/
    │   └── src/
    │       ├── Engine/
    │       │   ├── Core/
    │       │   ├── Debug/
    │       │   │   └── Debug.cs
    │       │   ├── ECS/
    │       │   └── Managers/
    │       │       ├── AssetManager.cs
    │       │       ├── ConfigManager.cs
    │       │       └── LogManager.cs
    │       └── TestScenes/
    ├── bin/
    ├── docs/
    │   ├── PRD.md
    │   ├── architecture.md
    │   ├── coding-standards.md
    │   ├── data-models.md
    │   ├── product-brief.md
    │   ├── project-structure.md
    │   ├── tech-stack.md
    │   ├── testing-strategy.md
    │   └── epics/
    │       ├── epic1.md
    │       ├── epic2.md
    │       ├── epic3.md
    │       ├── epic4.md
    │       ├── epic5.md
    │       ├── epic6.md
    │       ├── epic7.md
    │       ├── epic8.md
    │       └── epic9.md
    ├── .config/
    │   └── dotnet-tools.json
    ├── .cursor/
    ├── .github/
    │   ├── CODEOWNERS
    │   ├── copilot-instructions.md
    │   ├── dependabot.yml
    │   ├── deactivated/
    │   │   ├── ci.yml
    │   │   ├── codeql.yml
    │   │   ├── dependency-review.yml
    │   │   ├── release.yml
    │   │   └── scorecard.yml
    │   ├── scripts/
    │   │   └── determine_next_version.py
    │   └── workflows/
    └── .roo/

================================================
File: Taskfile.yml
================================================
version: '3'

tasks:
  digest:
    desc: Digest the git repository.
    cmds:
      - gitingest -o docs/digest.txt -e *.toml,*.txt,.roo/*,.cursor/*,build/*,.devenv/*,.direnv/*,docs/digest.txt,docs/archive/*,bin/*,obj/* .



================================================
File: monogame-nightrunner.sln
================================================
ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.2.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "NightRunner", "NightRunner\NightRunner.csproj", "{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|Any CPU = Release|Any CPU
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Debug|x64.ActiveCfg = Debug|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Debug|x64.Build.0 = Debug|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Debug|x86.ActiveCfg = Debug|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Debug|x86.Build.0 = Debug|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Release|Any CPU.Build.0 = Release|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Release|x64.ActiveCfg = Release|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Release|x64.Build.0 = Release|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Release|x86.ActiveCfg = Release|Any CPU
		{D6B8B4F9-E25B-4A71-98B0-EECBA54D7A9C}.Release|x86.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {701F17B2-EACA-4A5C-8FB6-3A9FFB4CE06E}
	EndGlobalSection
EndGlobal



================================================
File: port.ps1
================================================
# Script to copy VS Code user settings and data to Cursor,
# adapted for VS Code installed via Scoop.

# Path to your VS Code User data directory.
# This path was confirmed by you for your specific Scoop installation.
$SourceVscodeUserDataPath = "C:\Users\Danny\scoop\apps\vscode\1.100.0\data\user-data\User"

# If your VS Code version changes, you might need to update the version number (e.g., '1.100.0') in the path above.
# Alternatively, if Scoop creates a 'current' symlink that points to the active version's 'user-data\User' folder,
# you could try to construct the path dynamically. However, using the explicit path is safest if known.

# Destination path for Cursor User data (this is the standard location for Cursor).
$DestCursorUserDataPath = Join-Path -Path $env:APPDATA -ChildPath "Cursor\User"

# --- Verification and Pre-checks ---

# 1. Verify the source VS Code User data path exists
if (-not (Test-Path $SourceVscodeUserDataPath)) {
    Write-Error "VS Code User data directory not found at the specified path: '$SourceVscodeUserDataPath'"
    Write-Host "Please double-check that this path is correct and that the folder exists."
    Write-Host "You provided this path: C:\Users\Danny\scoop\apps\vscode\1.100.0\data\user-data\User"
    Write-Host "To find the correct User data path in VS Code if it has changed: "
    Write-Host "  1. Open VS Code."
    Write-Host "  2. Open the Command Palette (Ctrl+Shift+P or F1)."
    Write-Host "  3. Type and run 'Preferences: Open User Settings (JSON)'."
    Write-Host "  4. The file path of 'settings.json' will be shown at the top. The 'User' folder is its parent directory."
    exit 1 # Exit if source path is not found
} else {
    Write-Host "Found VS Code User data (source) at: $SourceVscodeUserDataPath"
}

# 2. Ensure the destination directory for Cursor User data exists, or create it.
# First, check if the parent directory ($env:APPDATA\Cursor) exists.
$DestCursorBaseDir = Split-Path -Path $DestCursorUserDataPath
if (-not (Test-Path $DestCursorBaseDir)) {
    Write-Host "Base Cursor directory '$DestCursorBaseDir' does not exist. Creating it..."
    try {
        New-Item -ItemType Directory -Path $DestCursorBaseDir -Force -ErrorAction Stop | Out-Null
        Write-Host "Successfully created directory: $DestCursorBaseDir"
    } catch {
        Write-Error "Failed to create base Cursor directory '$DestCursorBaseDir'. Error: $($_.Exception.Message)"
        Write-Host "Please ensure Cursor is installed or create this directory manually and re-run."
        exit 1
    }
}

# Now, ensure the specific 'User' directory for Cursor exists.
if (-not (Test-Path $DestCursorUserDataPath)) {
    Write-Host "Cursor User data directory '$DestCursorUserDataPath' does not exist. Creating it..."
    try {
        New-Item -ItemType Directory -Path $DestCursorUserDataPath -Force -ErrorAction Stop | Out-Null
        Write-Host "Successfully created directory: $DestCursorUserDataPath"
    } catch {
        Write-Error "Failed to create destination directory '$DestCursorUserDataPath'. Error: $($_.Exception.Message)"
        exit 1
    }
} else {
    Write-Host "Found Cursor User data (destination) at: $DestCursorUserDataPath"
}

# --- Perform the Copy Operation ---
Write-Host ""
Write-Host "Attempting to copy user settings from '$SourceVscodeUserDataPath' to '$DestCursorUserDataPath'..."
try {
    # The `\*` ensures that the *contents* of the source User folder are copied into the destination User folder.
    Copy-Item -Path "$SourceVscodeUserDataPath\*" -Destination $DestCursorUserDataPath -Recurse -Force -ErrorAction Stop
    Write-Host "Successfully copied VS Code user settings and data to Cursor."
    Write-Host "This includes settings.json, keybindings.json, snippets, UI state, and extension metadata."
} catch {
    Write-Error "An error occurred during the copy operation: $($_.Exception.Message)"
    Write-Host "Please check your permissions for both source and destination paths."
    Write-Host "Ensure no files are locked by running processes (e.g., close VS Code and Cursor)."
    exit 1
}

# --- Important Notes ---
Write-Host ""
Write-Host "--- Important Notes ---"
Write-Host "1. What was copied: This script copies the contents of the 'User' directory. This folder typically contains:"
Write-Host "   - settings.json (your VS Code settings)"
Write-Host "   - keybindings.json (custom keyboard shortcuts)"
Write-Host "   - Snippets"
Write-Host "   - UI state (which files were open, panel layouts, etc.)"
Write-Host "   - Information about your installed extensions (the list of them, their state - enabled/disabled)."
Write-Host ""
Write-Host "2. Extensions Files: This script does NOT copy the actual extension *program files* themselves."
Write-Host "   The source for extension program files would likely be in a parallel 'extensions' folder, such as:"
Write-Host "   'C:\Users\Danny\scoop\apps\vscode\1.100.0\data\extensions' (or similar)"
Write-Host "   Cursor typically manages its own extensions, often in a path like '$env:USERPROFILE\.cursor\extensions'."
Write-Host "   After copying the 'User' data, Cursor should recognize which extensions you had and may prompt you to reinstall them or handle them automatically."
Write-Host "   If you need to manually copy extension files, you'll need to identify both source and destination extension folders and use a similar Copy-Item command for them."
Write-Host ""
Write-Host "3. Restart Cursor: After running this script, please close and restart Cursor for the changes to take effect."
Write-Host ""
Write-Host "Script finished."




================================================
File: .windsurfrules
================================================
# AI Project Guidelines

**Objective:** Define mandatory process, coding, testing, and interaction standards for AI assistance.

## 1. Preparation

* **Project Context (Session Start):** ALWAYS review key project docs: `docs/PRD.md` (architecture, goals, tech stack, versions, structure, style guide) and `docs/digest.txt` (current state summary).

## 2. Implementation Planning

**Present this plan before providing code for a task:**

* Problem description (brief).
* Solution overview (high-level).
* Implementation steps (list).
* Risks/Challenges (foreseen).

## 3. Development Workflow

* **Plan First:** Present plan (Sec 2) before coding.
* **Focus:** Target the specific task from the given from the prompt and related files which may contain tasks and task lists. No unrelated refactoring unless tasked.
* **Modification Approach:**
    * Prioritize minimal, incremental, clean, elegant, idiomatic changes.
    * Explain significant suggestions (Sec 5.4).
    * Propose beneficial low-risk refactoring.
    * Avoid duplication; use helpers/modules.
    * Explain use of language strengths/pitfalls if relevant.
* **Dependencies:** No new/updated external dependencies without explicit maintainer approval (check `docs/PRD.md` for approved stack/versions). Use only approved dependencies.
* **Commits (User Task):** Follow Conventional Commits (`https://www.conventionalcommits.org/en/v1.0.0/`).
* **Manual Testing:** Provide clear user instructions for manually testing the task's changes.

## 4. Folder Structure

* **Strict Adherence:** Follow structure defined in `docs/PRD.md`.
* **Changes:** No adding/removing/relocating files/dirs without prior maintainer approval. Approved structure changes require updating `docs/PRD.md` *before* implementation.
* **Source Location:** All source code must be in `src/`.
* **Precedence:** This rule is foundational.

## 5. Coding Standards

### 5.1. General & Robustness

* Follow language best practices unless overridden by `docs/PRD.md` or these guidelines.
* Prioritize: Clarity, maintainability, efficiency.
* Consider performance & basic security.
* Implement robust error handling (language norms or `PRD.md` spec); handle errors gracefully.

### 5.2. Modularity & Structure

* Keep files focused (ideally < 500 lines); refactor large ones.
* Prefer small, single-purpose functions.
* Structure code logically (per `docs/PRD.md`) into modules.
* Use clear, consistent imports (relative for local packages). Verify paths.

### 5.3. Style & Formatting

* **Priority:** 1) `docs/PRD.md`, 2) These rules, 3) Language common practices.
* **Type Hinting:** Mandatory for functions/classes/modules (dynamic languages).
* **Indentation:** 2 spaces.
* **Function Calls:** No space: `func()` not `func ()`.
* **Line Structure:** Avoid collapsing statements if clarity suffers.
* **Scope:** Default local. More descriptive names for wider scope. Avoid single-letter vars (except iterators/tiny scope; `i` only for loops). Use `_` for ignored vars.
* **Casing:** Match current file style; else language common style. `UPPER_CASE` for constants only.
* **Booleans:** Prefer `is_` prefix for boolean functions.
* **File Headers:** Top comment: Title (descriptive, not filename) + brief purpose. No version/OS info.

### 5.4. Documentation & Comments

* **Docstrings:** Required for public functions, classes, modules (standard format).
* **Code Comments:** Explain non-obvious logic, complex algorithms, decisions (*why*, not *what*). Write less comments.
* **Reasoning Comments:** Use `# Reason:` for complex block rationale.
* **README Updates:** Update `docs/README.md` for core features, dependency changes, or setup/build modifications.

## 6. Testing

* **Goal:** Tests are living documentation specifying behavior. Use common language framework.
* **Behavior Specification:** Tests specify behavior. Type/scope/timing (e.g., E2E, Unit, Integration) defined in `docs/PRD.md` per project phase.
* **Location:** Place tests in `/src/test` (Lua: `/src/spec`), mirroring `src/` structure (Sec 4).
    * Ex: Tests for `src/engine/mod.js` -> `src/test/engine/mod_test.js`.
    * Ex: Lua spec for `src/engine/mod.lua` -> `src/spec/engine/mod_spec.lua`.
* **Content:** Tests clearly describe expected behavior per `PRD.md` goals for the current phase.
    * **Prototype Phase:** Primary focus on automated E2E tests validating core functionality.
* **Strategy & Coverage:** Defined in `PRD.md`, evolves with phases.
    * **Prototype Phase:** E2E priority. Comprehensive unit tests & code coverage metrics (e.g., 100% statement coverage) are **not** the focus *unless* specified in `docs/PRD.md` for a later phase demanding them.
* **Updating Tests:** Review/update tests with code changes to reflect *current* expected behavior. Fix failing/outdated tests promptly.

## 7. AI Interaction Protocols

### 7.1. Engineering Role & Audience

* **Role:** Act as a **Senior Software Engineer**.
* **Audience:** Target **Mid-Level Software Engineers** (code = best practices, clear, documented; explanations thorough; justify complex choices).

### 7.2. Interaction Guidelines

* Ask clarifying questions if needed; do not assume.
* Verify facts (libs, APIs, file paths); do not invent. Use MCP servers if available.
* Do not delete/overwrite code unless instructed or part of the defined task.
* Report significant blockers/errors *during* implementation promptly with context and suggestions.
* If a task seems complex, state potential benefit from a more advanced model **boldly** at the start (e.g., "**Suggestion: This complex refactoring might benefit from a more advanced model.**").
* Be friendly, helpful, collaborative.
* Explicitly state when task requirements are met. Mark task complete in any task lists found.



================================================
File: Content/Content.mgcb
================================================

#----------------------------- Global Properties ----------------------------#

/outputDir:bin/$(Platform)
/intermediateDir:obj/$(Platform)
/platform:DesktopGL
/config:
/profile:Reach
/compress:False

#-------------------------------- References --------------------------------#


#---------------------------------- Content ---------------------------------#


#begin Textures/test_texture.png
/importer:TextureImporter
/processor:TextureProcessor
/processorParam:ColorKeyColor=255,0,255,255
/processorParam:ColorKeyEnabled=True
/processorParam:GenerateMipmaps=False
/processorParam:PremultiplyAlpha=True
/processorParam:ResizeToPowerOfTwo=False
/processorParam:MakeSquare=False
/processorParam:TextureFormat=Color
/build:Textures/test_texture.png





================================================
File: Content/obj/DesktopGL/net8.0/Content/.mgstats
================================================
Source File,Dest File,Processor Type,Content Type,Source File Size,Dest File Size,Build Seconds



================================================
File: CreateTestTexture/CreateTestTexture.csproj
================================================
ï»¿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Drawing.Common" Version="6.0.0" />
  </ItemGroup>

</Project>



================================================
File: CreateTestTexture/Program.cs
================================================
// See https://aka.ms/new-console-template for more information
Console.WriteLine("Hello, World!");



================================================
File: CreateTestTexture/obj/CreateTestTexture.csproj.nuget.dgspec.json
================================================
{
  "format": 1,
  "restore": {
    "E:\\git\\monogame-nightrunner\\CreateTestTexture\\CreateTestTexture.csproj": {}
  },
  "projects": {
    "E:\\git\\monogame-nightrunner\\CreateTestTexture\\CreateTestTexture.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "E:\\git\\monogame-nightrunner\\CreateTestTexture\\CreateTestTexture.csproj",
        "projectName": "CreateTestTexture",
        "projectPath": "E:\\git\\monogame-nightrunner\\CreateTestTexture\\CreateTestTexture.csproj",
        "packagesPath": "C:\\Users\\Danny\\.nuget\\packages\\",
        "outputPath": "E:\\git\\monogame-nightrunner\\CreateTestTexture\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\Danny\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config"
        ],
        "originalTargetFrameworks": [
          "net9.0"
        ],
        "sources": {
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net9.0": {
            "targetAlias": "net9.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.300"
      },
      "frameworks": {
        "net9.0": {
          "targetAlias": "net9.0",
          "dependencies": {
            "System.Drawing.Common": {
              "target": "Package",
              "version": "[6.0.0, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.300/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}


================================================
File: CreateTestTexture/obj/CreateTestTexture.csproj.nuget.g.props
================================================
ï»¿<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\Danny\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.14.0</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\Danny\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
</Project>


================================================
File: CreateTestTexture/obj/CreateTestTexture.csproj.nuget.g.targets
================================================
ï»¿<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" />


================================================
File: CreateTestTexture/obj/project.assets.json
================================================
{
  "version": 3,
  "targets": {
    "net9.0": {
      "Microsoft.Win32.SystemEvents/6.0.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      },
      "System.Drawing.Common/6.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Win32.SystemEvents": "6.0.0"
        },
        "compile": {
          "lib/net6.0/System.Drawing.Common.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Drawing.Common.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        },
        "runtimeTargets": {
          "runtimes/unix/lib/net6.0/System.Drawing.Common.dll": {
            "assetType": "runtime",
            "rid": "unix"
          },
          "runtimes/win/lib/net6.0/System.Drawing.Common.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      }
    }
  },
  "libraries": {
    "Microsoft.Win32.SystemEvents/6.0.0": {
      "sha512": "hqTM5628jSsQiv+HGpiq3WKBl2c8v1KZfby2J6Pr7pEPlK9waPdgEO6b8A/+/xn/yZ9ulv8HuqK71ONy2tg67A==",
      "type": "package",
      "path": "microsoft.win32.systemevents/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/Microsoft.Win32.SystemEvents.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/Microsoft.Win32.SystemEvents.dll",
        "lib/net461/Microsoft.Win32.SystemEvents.xml",
        "lib/net6.0/Microsoft.Win32.SystemEvents.dll",
        "lib/net6.0/Microsoft.Win32.SystemEvents.xml",
        "lib/netcoreapp3.1/Microsoft.Win32.SystemEvents.dll",
        "lib/netcoreapp3.1/Microsoft.Win32.SystemEvents.xml",
        "lib/netstandard2.0/Microsoft.Win32.SystemEvents.dll",
        "lib/netstandard2.0/Microsoft.Win32.SystemEvents.xml",
        "microsoft.win32.systemevents.6.0.0.nupkg.sha512",
        "microsoft.win32.systemevents.nuspec",
        "runtimes/win/lib/net6.0/Microsoft.Win32.SystemEvents.dll",
        "runtimes/win/lib/net6.0/Microsoft.Win32.SystemEvents.xml",
        "runtimes/win/lib/netcoreapp3.1/Microsoft.Win32.SystemEvents.dll",
        "runtimes/win/lib/netcoreapp3.1/Microsoft.Win32.SystemEvents.xml",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Drawing.Common/6.0.0": {
      "sha512": "NfuoKUiP2nUWwKZN6twGqXioIe1zVD0RIj2t976A+czLHr2nY454RwwXs6JU9Htc6mwqL6Dn/nEL3dpVf2jOhg==",
      "type": "package",
      "path": "system.drawing.common/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Drawing.Common.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net461/System.Drawing.Common.dll",
        "lib/net461/System.Drawing.Common.xml",
        "lib/net6.0/System.Drawing.Common.dll",
        "lib/net6.0/System.Drawing.Common.xml",
        "lib/netcoreapp3.1/System.Drawing.Common.dll",
        "lib/netcoreapp3.1/System.Drawing.Common.xml",
        "lib/netstandard2.0/System.Drawing.Common.dll",
        "lib/netstandard2.0/System.Drawing.Common.xml",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "runtimes/unix/lib/net6.0/System.Drawing.Common.dll",
        "runtimes/unix/lib/net6.0/System.Drawing.Common.xml",
        "runtimes/unix/lib/netcoreapp3.1/System.Drawing.Common.dll",
        "runtimes/unix/lib/netcoreapp3.1/System.Drawing.Common.xml",
        "runtimes/win/lib/net6.0/System.Drawing.Common.dll",
        "runtimes/win/lib/net6.0/System.Drawing.Common.xml",
        "runtimes/win/lib/netcoreapp3.1/System.Drawing.Common.dll",
        "runtimes/win/lib/netcoreapp3.1/System.Drawing.Common.xml",
        "system.drawing.common.6.0.0.nupkg.sha512",
        "system.drawing.common.nuspec",
        "useSharedDesignerContext.txt"
      ]
    }
  },
  "projectFileDependencyGroups": {
    "net9.0": [
      "System.Drawing.Common >= 6.0.0"
    ]
  },
  "packageFolders": {
    "C:\\Users\\Danny\\.nuget\\packages\\": {},
    "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "E:\\git\\monogame-nightrunner\\CreateTestTexture\\CreateTestTexture.csproj",
      "projectName": "CreateTestTexture",
      "projectPath": "E:\\git\\monogame-nightrunner\\CreateTestTexture\\CreateTestTexture.csproj",
      "packagesPath": "C:\\Users\\Danny\\.nuget\\packages\\",
      "outputPath": "E:\\git\\monogame-nightrunner\\CreateTestTexture\\obj\\",
      "projectStyle": "PackageReference",
      "fallbackFolders": [
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
      ],
      "configFilePaths": [
        "C:\\Users\\Danny\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config"
      ],
      "originalTargetFrameworks": [
        "net9.0"
      ],
      "sources": {
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net9.0": {
          "targetAlias": "net9.0",
          "projectReferences": {}
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      },
      "SdkAnalysisLevel": "9.0.300"
    },
    "frameworks": {
      "net9.0": {
        "targetAlias": "net9.0",
        "dependencies": {
          "System.Drawing.Common": {
            "target": "Package",
            "version": "[6.0.0, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.300/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}


================================================
File: CreateTestTexture/obj/project.nuget.cache
================================================
{
  "version": 2,
  "dgSpecHash": "koJYp31GP7g=",
  "success": true,
  "projectFilePath": "E:\\git\\monogame-nightrunner\\CreateTestTexture\\CreateTestTexture.csproj",
  "expectedPackageFiles": [
    "C:\\Users\\Danny\\.nuget\\packages\\microsoft.win32.systemevents\\6.0.0\\microsoft.win32.systemevents.6.0.0.nupkg.sha512",
    "C:\\Users\\Danny\\.nuget\\packages\\system.drawing.common\\6.0.0\\system.drawing.common.6.0.0.nupkg.sha512"
  ],
  "logs": []
}


================================================
File: NightRunner/Game1.cs
================================================
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace nightrunner;

public class Game1 : Game
{
    private GraphicsDeviceManager _graphics;
    private SpriteBatch _spriteBatch;

    public Game1()
    {
        _graphics = new GraphicsDeviceManager(this);
        Content.RootDirectory = "Content";
        IsMouseVisible = true;
    }

    protected override void Initialize()
    {
        // TODO: Add your initialization logic here

        base.Initialize();
    }

    protected override void LoadContent()
    {
        _spriteBatch = new SpriteBatch(GraphicsDevice);

        // TODO: use this.Content to load your game content here
    }

    protected override void Update(GameTime gameTime)
    {
        if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
            Exit();

        // TODO: Add your update logic here

        base.Update(gameTime);
    }

    protected override void Draw(GameTime gameTime)
    {
        GraphicsDevice.Clear(Color.CornflowerBlue);

        // TODO: Add your drawing code here

        base.Draw(gameTime);
    }
}



================================================
File: NightRunner/Icon.bmp
================================================
[Non-text file]


================================================
File: NightRunner/Program.cs
================================================
using var game = new NightRunner.Engine.Core.ScarletDebug();
game.Run();



================================================
File: NightRunner/app.manifest
================================================
ï»¿<?xml version="1.0" encoding="utf-8"?>
<assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1">
  <assemblyIdentity version="1.0.0.0" name="nightrunner"/>
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
    <security>
      <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
        <requestedExecutionLevel  level="asInvoker" uiAccess="false" />
      </requestedPrivileges>
    </security>
  </trustInfo>

  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
    <application>
      <!-- A list of the Windows versions that this application has been tested on and is
           is designed to work with. Uncomment the appropriate elements and Windows will 
           automatically selected the most compatible environment. -->

      <!-- Windows Vista -->
      <supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}" />

      <!-- Windows 7 -->
      <supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}" />

      <!-- Windows 8 -->
      <supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}" />

      <!-- Windows 8.1 -->
      <supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}" />

      <!-- Windows 10 -->
      <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}" />

    </application>
  </compatibility>

  <application xmlns="urn:schemas-microsoft-com:asm.v3">
    <windowsSettings>
      <dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true/pm</dpiAware>
      <dpiAwareness xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">permonitorv2,permonitor</dpiAwareness>
    </windowsSettings>
  </application>

</assembly>



================================================
File: NightRunner/nightrunner.csproj
================================================
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net9.0</TargetFramework>
    <RollForward>Major</RollForward>
    <PublishReadyToRun>false</PublishReadyToRun>
    <TieredCompilation>false</TieredCompilation>
  </PropertyGroup>
  <PropertyGroup>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <ApplicationIcon>Icon.ico</ApplicationIcon>
  </PropertyGroup>
  <ItemGroup>
    <None Remove="Icon.ico" />
    <None Remove="Icon.bmp" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Icon.ico">
      <LogicalName>Icon.ico</LogicalName>
    </EmbeddedResource>
    <EmbeddedResource Include="Icon.bmp">
      <LogicalName>Icon.bmp</LogicalName>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="MonoGame.Framework.DesktopGL" Version="3.8.*" />
    <PackageReference Include="MonoGame.Content.Builder.Task" Version="3.8.*" />
  </ItemGroup>
  <Target Name="RestoreDotnetTools" BeforeTargets="Restore">
    <Message Text="Restoring dotnet tools" Importance="High" />
    <Exec Command="dotnet tool restore" />
  </Target>
</Project>


================================================
File: NightRunner/bin/Debug/net9.0/nightrunner.deps.json
================================================
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v9.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v9.0": {
      "nightrunner/1.0.0": {
        "dependencies": {
          "MonoGame.Content.Builder.Task": "3.8.3",
          "MonoGame.Framework.DesktopGL": "3.8.3"
        },
        "runtime": {
          "nightrunner.dll": {}
        }
      },
      "MonoGame.Content.Builder.Task/3.8.3": {},
      "MonoGame.Framework.DesktopGL/3.8.3": {
        "dependencies": {
          "MonoGame.Library.OpenAL": "1.23.1.10",
          "MonoGame.Library.SDL": "2.32.2.1",
          "NVorbis": "0.10.4"
        },
        "runtime": {
          "lib/net8.0/MonoGame.Framework.dll": {
            "assemblyVersion": "3.8.3.0",
            "fileVersion": "3.8.3.0"
          }
        }
      },
      "MonoGame.Library.OpenAL/1.23.1.10": {
        "runtimeTargets": {
          "runtimes/android-arm/native/libopenal.so": {
            "rid": "android-arm",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/android-arm64/native/libopenal.so": {
            "rid": "android-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/android-x64/native/libopenal.so": {
            "rid": "android-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/android-x86/native/libopenal.so": {
            "rid": "android-x86",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/ios-arm64/native/libopenal.dylib": {
            "rid": "ios-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/iossimulator-arm64/native/libopenal.dylib": {
            "rid": "iossimulator-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/iossimulator-x64/native/libopenal.dylib": {
            "rid": "iossimulator-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-x64/native/libopenal.so": {
            "rid": "linux-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/osx/native/libopenal.dylib": {
            "rid": "osx",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x64/native/openal.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "1.23.1.0"
          }
        }
      },
      "MonoGame.Library.SDL/2.32.2.1": {
        "runtimeTargets": {
          "runtimes/linux-x64/native/libSDL2-2.0.so.0": {
            "rid": "linux-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/osx/native/libSDL2-2.0.0.dylib": {
            "rid": "osx",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x64/native/SDL2.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "2.32.2.0"
          }
        }
      },
      "NVorbis/0.10.4": {
        "dependencies": {
          "System.Memory": "4.5.3",
          "System.ValueTuple": "4.5.0"
        },
        "runtime": {
          "lib/netstandard2.0/NVorbis.dll": {
            "assemblyVersion": "0.10.4.0",
            "fileVersion": "0.10.4.0"
          }
        }
      },
      "System.Memory/4.5.3": {},
      "System.ValueTuple/4.5.0": {}
    }
  },
  "libraries": {
    "nightrunner/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "MonoGame.Content.Builder.Task/3.8.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Q1Pv/MCIcnrV4cjIw9sKdY30Swoj5ju+bCASx4E+vvtfXc3ENnHAVJ6QEFeqlcfA0fJZIX4igMmsf6gQbVHXHw==",
      "path": "monogame.content.builder.task/3.8.3",
      "hashPath": "monogame.content.builder.task.3.8.3.nupkg.sha512"
    },
    "MonoGame.Framework.DesktopGL/3.8.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cuyMJrK6fHD13J3gqkSx5yF3agbI9E9sXtynhq6IDmUnvi43PTfbLEH04MStDzJJ3OPGaKDW1zcxqA/G8GwOUw==",
      "path": "monogame.framework.desktopgl/3.8.3",
      "hashPath": "monogame.framework.desktopgl.3.8.3.nupkg.sha512"
    },
    "MonoGame.Library.OpenAL/1.23.1.10": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4/F4FFyt7OYhtEmgi/Qmv01eC6GfQ9dkIPsymgkwJ/tV7PewmWrHg/LvTKjd6R+5j/tlO8JkjsEb0Aje6bxfxw==",
      "path": "monogame.library.openal/1.23.1.10",
      "hashPath": "monogame.library.openal.1.23.1.10.nupkg.sha512"
    },
    "MonoGame.Library.SDL/2.32.2.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-T4E2ppGlSTC2L9US1rxtdg3qTbarRzNId31xZoumUW9cf9Nq8nRQPMu9GzvZGrhfSySf0+UWPEj1rlicps+P/w==",
      "path": "monogame.library.sdl/2.32.2.1",
      "hashPath": "monogame.library.sdl.2.32.2.1.nupkg.sha512"
    },
    "NVorbis/0.10.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-WYnil3DhQHzjCY0dM9I2B3r1vWip90AOuQd25KE4NrjPQBg0tBJFluRLm5YPnO5ZLDmwrfosY8jCQGQRmWI/Pg==",
      "path": "nvorbis/0.10.4",
      "hashPath": "nvorbis.0.10.4.nupkg.sha512"
    },
    "System.Memory/4.5.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3oDzvc/zzetpTKWMShs1AADwZjQ/36HnsufHRPcOjyRAAMLDlu2iD33MBI2opxnezcVUtXyqDXXjoFMOU9c7SA==",
      "path": "system.memory/4.5.3",
      "hashPath": "system.memory.4.5.3.nupkg.sha512"
    },
    "System.ValueTuple/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-okurQJO6NRE/apDIP23ajJ0hpiNmJ+f0BwOlB/cSqTLQlw5upkf+5+96+iG2Jw40G1fCVCyPz/FhIABUjMR+RQ==",
      "path": "system.valuetuple/4.5.0",
      "hashPath": "system.valuetuple.4.5.0.nupkg.sha512"
    }
  }
}


================================================
File: NightRunner/bin/Debug/net9.0/nightrunner.runtimeconfig.json
================================================
{
  "runtimeOptions": {
    "tfm": "net9.0",
    "rollForward": "Major",
    "framework": {
      "name": "Microsoft.NETCore.App",
      "version": "9.0.0"
    },
    "configProperties": {
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false,
      "System.Runtime.TieredCompilation": false
    }
  }
}









================================================
File: NightRunner/bin/Debug/net9.0/runtimes/linux-x64/native/libSDL2-2.0.so.0
================================================
[Non-text file]




================================================
File: NightRunner/obj/nightrunner.csproj.nuget.dgspec.json
================================================
{
  "format": 1,
  "restore": {
    "c:\\Users\\Danny\\git\\monogame-nightrunner\\NightRunner\\nightrunner.csproj": {}
  },
  "projects": {
    "c:\\Users\\Danny\\git\\monogame-nightrunner\\NightRunner\\nightrunner.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "c:\\Users\\Danny\\git\\monogame-nightrunner\\NightRunner\\nightrunner.csproj",
        "projectName": "nightrunner",
        "projectPath": "c:\\Users\\Danny\\git\\monogame-nightrunner\\NightRunner\\nightrunner.csproj",
        "packagesPath": "C:\\Users\\Danny\\.nuget\\packages\\",
        "outputPath": "c:\\Users\\Danny\\git\\monogame-nightrunner\\NightRunner\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\Danny\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config"
        ],
        "originalTargetFrameworks": [
          "net9.0"
        ],
        "sources": {
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net9.0": {
            "targetAlias": "net9.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.300"
      },
      "frameworks": {
        "net9.0": {
          "targetAlias": "net9.0",
          "dependencies": {
            "MonoGame.Content.Builder.Task": {
              "target": "Package",
              "version": "[3.8.*, )"
            },
            "MonoGame.Framework.DesktopGL": {
              "target": "Package",
              "version": "[3.8.*, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.300/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}


================================================
File: NightRunner/obj/nightrunner.csproj.nuget.g.props
================================================
ï»¿<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\Danny\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.14.0</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\Danny\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)monogame.content.builder.task\3.8.3\build\MonoGame.Content.Builder.Task.props" Condition="Exists('$(NuGetPackageRoot)monogame.content.builder.task\3.8.3\build\MonoGame.Content.Builder.Task.props')" />
  </ImportGroup>
</Project>


================================================
File: NightRunner/obj/nightrunner.csproj.nuget.g.targets
================================================
ï»¿<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)monogame.framework.desktopgl\3.8.3\build\MonoGame.Framework.DesktopGL.targets" Condition="Exists('$(NuGetPackageRoot)monogame.framework.desktopgl\3.8.3\build\MonoGame.Framework.DesktopGL.targets')" />
    <Import Project="$(NuGetPackageRoot)monogame.content.builder.task\3.8.3\build\MonoGame.Content.Builder.Task.targets" Condition="Exists('$(NuGetPackageRoot)monogame.content.builder.task\3.8.3\build\MonoGame.Content.Builder.Task.targets')" />
  </ImportGroup>
</Project>


================================================
File: NightRunner/obj/project.assets.json
================================================
{
  "version": 3,
  "targets": {
    "net9.0": {
      "MonoGame.Content.Builder.Task/3.8.3": {
        "type": "package",
        "build": {
          "build/MonoGame.Content.Builder.Task.props": {},
          "build/MonoGame.Content.Builder.Task.targets": {}
        }
      },
      "MonoGame.Framework.DesktopGL/3.8.3": {
        "type": "package",
        "dependencies": {
          "MonoGame.Library.OpenAL": "1.23.1.10",
          "MonoGame.Library.SDL": "2.32.2.1",
          "NVorbis": "0.10.4"
        },
        "compile": {
          "lib/net8.0/MonoGame.Framework.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/MonoGame.Framework.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "build/MonoGame.Framework.DesktopGL.targets": {}
        }
      },
      "MonoGame.Library.OpenAL/1.23.1.10": {
        "type": "package",
        "runtimeTargets": {
          "runtimes/android-arm/native/libopenal.so": {
            "assetType": "native",
            "rid": "android-arm"
          },
          "runtimes/android-arm64/native/libopenal.so": {
            "assetType": "native",
            "rid": "android-arm64"
          },
          "runtimes/android-x64/native/libopenal.so": {
            "assetType": "native",
            "rid": "android-x64"
          },
          "runtimes/android-x86/native/libopenal.so": {
            "assetType": "native",
            "rid": "android-x86"
          },
          "runtimes/ios-arm64/native/libopenal.dylib": {
            "assetType": "native",
            "rid": "ios-arm64"
          },
          "runtimes/iossimulator-arm64/native/libopenal.dylib": {
            "assetType": "native",
            "rid": "iossimulator-arm64"
          },
          "runtimes/iossimulator-x64/native/libopenal.dylib": {
            "assetType": "native",
            "rid": "iossimulator-x64"
          },
          "runtimes/linux-x64/native/libopenal.so": {
            "assetType": "native",
            "rid": "linux-x64"
          },
          "runtimes/osx/native/libopenal.dylib": {
            "assetType": "native",
            "rid": "osx"
          },
          "runtimes/win-x64/native/openal.dll": {
            "assetType": "native",
            "rid": "win-x64"
          }
        }
      },
      "MonoGame.Library.SDL/2.32.2.1": {
        "type": "package",
        "runtimeTargets": {
          "runtimes/linux-x64/native/libSDL2-2.0.so.0": {
            "assetType": "native",
            "rid": "linux-x64"
          },
          "runtimes/osx/native/libSDL2-2.0.0.dylib": {
            "assetType": "native",
            "rid": "osx"
          },
          "runtimes/win-x64/native/SDL2.dll": {
            "assetType": "native",
            "rid": "win-x64"
          }
        }
      },
      "NVorbis/0.10.4": {
        "type": "package",
        "dependencies": {
          "System.Memory": "4.5.3",
          "System.ValueTuple": "4.5.0"
        },
        "compile": {
          "lib/netstandard2.0/NVorbis.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/NVorbis.dll": {
            "related": ".xml"
          }
        }
      },
      "System.Memory/4.5.3": {
        "type": "package",
        "compile": {
          "ref/netcoreapp2.1/_._": {}
        },
        "runtime": {
          "lib/netcoreapp2.1/_._": {}
        }
      },
      "System.ValueTuple/4.5.0": {
        "type": "package",
        "compile": {
          "ref/netcoreapp2.0/_._": {}
        },
        "runtime": {
          "lib/netcoreapp2.0/_._": {}
        }
      }
    }
  },
  "libraries": {
    "MonoGame.Content.Builder.Task/3.8.3": {
      "sha512": "Q1Pv/MCIcnrV4cjIw9sKdY30Swoj5ju+bCASx4E+vvtfXc3ENnHAVJ6QEFeqlcfA0fJZIX4igMmsf6gQbVHXHw==",
      "type": "package",
      "path": "monogame.content.builder.task/3.8.3",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "README.md",
        "build/MonoGame.Content.Builder.Task.props",
        "build/MonoGame.Content.Builder.Task.targets",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/.nupkg.metadata",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/.signature.p7s",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/Icon.png",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/README.md",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/dotnet-mgcb.3.8.3.nupkg",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/dotnet-mgcb.3.8.3.nupkg.sha512",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/dotnet-mgcb.nupkg",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/dotnet-mgcb.nuspec",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/AssimpNetter.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/BCnEncoder.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/CppNet.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/DotnetToolSettings.xml",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/KtxSharp.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/Microsoft.Toolkit.HighPerformance.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/MonoGame.Framework.Content.Pipeline.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/MonoGame.Framework.Content.Pipeline.pdb",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/MonoGame.Framework.Content.Pipeline.xml",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/MonoGame.Framework.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/MonoGame.Framework.pdb",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/MonoGame.Framework.xml",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/SharpDX.D3DCompiler.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/SharpDX.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/libmojoshader_64.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/mgcb.deps.json",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/mgcb.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/mgcb.pdb",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/mgcb.runtimeconfig.json",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/mgfxc",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/mgfxc.deps.json",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/mgfxc.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/mgfxc.pdb",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/mgfxc.runtimeconfig.json",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/linux-arm64/native/libassimp.so",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/linux-x64/native/libassimp.so",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/linux-x64/native/libfreeimage.so",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/linux-x64/native/libfreetype.so",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/osx-arm64/native/libassimp.dylib",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/osx-x64/native/libassimp.dylib",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/osx/native/libfreeimage.dylib",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/osx/native/libfreetype.dylib",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/win-x64/native/FreeImage.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/win-x64/native/assimp.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/win-x64/native/freetype.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/dotnet-mgcb/3.8.3/tools/net8.0/any/runtimes/win-x86/native/assimp.dll",
        "build/dotnet-tools/.store/dotnet-mgcb/3.8.3/project.assets.json",
        "build/dotnet-tools/mgcb.exe",
        "monogame.content.builder.task.3.8.3.nupkg.sha512",
        "monogame.content.builder.task.nuspec"
      ]
    },
    "MonoGame.Framework.DesktopGL/3.8.3": {
      "sha512": "cuyMJrK6fHD13J3gqkSx5yF3agbI9E9sXtynhq6IDmUnvi43PTfbLEH04MStDzJJ3OPGaKDW1zcxqA/G8GwOUw==",
      "type": "package",
      "path": "monogame.framework.desktopgl/3.8.3",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "README.md",
        "build/MonoGame.Framework.DesktopGL.targets",
        "lib/net8.0/MonoGame.Framework.dll",
        "lib/net8.0/MonoGame.Framework.xml",
        "monogame.framework.desktopgl.3.8.3.nupkg.sha512",
        "monogame.framework.desktopgl.nuspec"
      ]
    },
    "MonoGame.Library.OpenAL/1.23.1.10": {
      "sha512": "4/F4FFyt7OYhtEmgi/Qmv01eC6GfQ9dkIPsymgkwJ/tV7PewmWrHg/LvTKjd6R+5j/tlO8JkjsEb0Aje6bxfxw==",
      "type": "package",
      "path": "monogame.library.openal/1.23.1.10",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE",
        "README.md",
        "monogame.library.openal.1.23.1.10.nupkg.sha512",
        "monogame.library.openal.nuspec",
        "runtimes/android-arm/native/libopenal.so",
        "runtimes/android-arm64/native/libopenal.so",
        "runtimes/android-x64/native/libopenal.so",
        "runtimes/android-x86/native/libopenal.so",
        "runtimes/ios-arm64/native/libopenal.dylib",
        "runtimes/iossimulator-arm64/native/libopenal.dylib",
        "runtimes/iossimulator-x64/native/libopenal.dylib",
        "runtimes/linux-x64/native/libopenal.so",
        "runtimes/osx/native/libopenal.dylib",
        "runtimes/win-x64/native/openal.dll"
      ]
    },
    "MonoGame.Library.SDL/2.32.2.1": {
      "sha512": "T4E2ppGlSTC2L9US1rxtdg3qTbarRzNId31xZoumUW9cf9Nq8nRQPMu9GzvZGrhfSySf0+UWPEj1rlicps+P/w==",
      "type": "package",
      "path": "monogame.library.sdl/2.32.2.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.txt",
        "README.md",
        "monogame.library.sdl.2.32.2.1.nupkg.sha512",
        "monogame.library.sdl.nuspec",
        "runtimes/linux-x64/native/libSDL2-2.0.so.0",
        "runtimes/osx/native/libSDL2-2.0.0.dylib",
        "runtimes/win-x64/native/SDL2.dll"
      ]
    },
    "NVorbis/0.10.4": {
      "sha512": "WYnil3DhQHzjCY0dM9I2B3r1vWip90AOuQd25KE4NrjPQBg0tBJFluRLm5YPnO5ZLDmwrfosY8jCQGQRmWI/Pg==",
      "type": "package",
      "path": "nvorbis/0.10.4",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE",
        "lib/net45/NVorbis.dll",
        "lib/net45/NVorbis.xml",
        "lib/netstandard2.0/NVorbis.dll",
        "lib/netstandard2.0/NVorbis.xml",
        "nvorbis.0.10.4.nupkg.sha512",
        "nvorbis.nuspec"
      ]
    },
    "System.Memory/4.5.3": {
      "sha512": "3oDzvc/zzetpTKWMShs1AADwZjQ/36HnsufHRPcOjyRAAMLDlu2iD33MBI2opxnezcVUtXyqDXXjoFMOU9c7SA==",
      "type": "package",
      "path": "system.memory/4.5.3",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/netcoreapp2.1/_._",
        "lib/netstandard1.1/System.Memory.dll",
        "lib/netstandard1.1/System.Memory.xml",
        "lib/netstandard2.0/System.Memory.dll",
        "lib/netstandard2.0/System.Memory.xml",
        "ref/netcoreapp2.1/_._",
        "system.memory.4.5.3.nupkg.sha512",
        "system.memory.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "System.ValueTuple/4.5.0": {
      "sha512": "okurQJO6NRE/apDIP23ajJ0hpiNmJ+f0BwOlB/cSqTLQlw5upkf+5+96+iG2Jw40G1fCVCyPz/FhIABUjMR+RQ==",
      "type": "package",
      "path": "system.valuetuple/4.5.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net461/System.ValueTuple.dll",
        "lib/net461/System.ValueTuple.xml",
        "lib/net47/System.ValueTuple.dll",
        "lib/net47/System.ValueTuple.xml",
        "lib/netcoreapp2.0/_._",
        "lib/netstandard1.0/System.ValueTuple.dll",
        "lib/netstandard1.0/System.ValueTuple.xml",
        "lib/netstandard2.0/_._",
        "lib/portable-net40+sl4+win8+wp8/System.ValueTuple.dll",
        "lib/portable-net40+sl4+win8+wp8/System.ValueTuple.xml",
        "lib/uap10.0.16299/_._",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "ref/MonoAndroid10/_._",
        "ref/MonoTouch10/_._",
        "ref/net461/System.ValueTuple.dll",
        "ref/net47/System.ValueTuple.dll",
        "ref/netcoreapp2.0/_._",
        "ref/netstandard2.0/_._",
        "ref/portable-net40+sl4+win8+wp8/System.ValueTuple.dll",
        "ref/uap10.0.16299/_._",
        "ref/xamarinios10/_._",
        "ref/xamarinmac20/_._",
        "ref/xamarintvos10/_._",
        "ref/xamarinwatchos10/_._",
        "system.valuetuple.4.5.0.nupkg.sha512",
        "system.valuetuple.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    }
  },
  "projectFileDependencyGroups": {
    "net9.0": [
      "MonoGame.Content.Builder.Task >= 3.8.*",
      "MonoGame.Framework.DesktopGL >= 3.8.*"
    ]
  },
  "packageFolders": {
    "C:\\Users\\Danny\\.nuget\\packages\\": {},
    "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "c:\\Users\\Danny\\git\\monogame-nightrunner\\NightRunner\\nightrunner.csproj",
      "projectName": "nightrunner",
      "projectPath": "c:\\Users\\Danny\\git\\monogame-nightrunner\\NightRunner\\nightrunner.csproj",
      "packagesPath": "C:\\Users\\Danny\\.nuget\\packages\\",
      "outputPath": "c:\\Users\\Danny\\git\\monogame-nightrunner\\NightRunner\\obj\\",
      "projectStyle": "PackageReference",
      "fallbackFolders": [
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
      ],
      "configFilePaths": [
        "C:\\Users\\Danny\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config"
      ],
      "originalTargetFrameworks": [
        "net9.0"
      ],
      "sources": {
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net9.0": {
          "targetAlias": "net9.0",
          "projectReferences": {}
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      },
      "SdkAnalysisLevel": "9.0.300"
    },
    "frameworks": {
      "net9.0": {
        "targetAlias": "net9.0",
        "dependencies": {
          "MonoGame.Content.Builder.Task": {
            "target": "Package",
            "version": "[3.8.*, )"
          },
          "MonoGame.Framework.DesktopGL": {
            "target": "Package",
            "version": "[3.8.*, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.300/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}


================================================
File: NightRunner/obj/project.nuget.cache
================================================
{
  "version": 2,
  "dgSpecHash": "YUZuOJDRlH0=",
  "success": true,
  "projectFilePath": "c:\\Users\\Danny\\git\\monogame-nightrunner\\NightRunner\\nightrunner.csproj",
  "expectedPackageFiles": [
    "C:\\Users\\Danny\\.nuget\\packages\\monogame.content.builder.task\\3.8.3\\monogame.content.builder.task.3.8.3.nupkg.sha512",
    "C:\\Users\\Danny\\.nuget\\packages\\monogame.framework.desktopgl\\3.8.3\\monogame.framework.desktopgl.3.8.3.nupkg.sha512",
    "C:\\Users\\Danny\\.nuget\\packages\\monogame.library.openal\\1.23.1.10\\monogame.library.openal.1.23.1.10.nupkg.sha512",
    "C:\\Users\\Danny\\.nuget\\packages\\monogame.library.sdl\\2.32.2.1\\monogame.library.sdl.2.32.2.1.nupkg.sha512",
    "C:\\Users\\Danny\\.nuget\\packages\\nvorbis\\0.10.4\\nvorbis.0.10.4.nupkg.sha512",
    "C:\\Users\\Danny\\.nuget\\packages\\system.memory\\4.5.3\\system.memory.4.5.3.nupkg.sha512",
    "C:\\Users\\Danny\\.nuget\\packages\\system.valuetuple\\4.5.0\\system.valuetuple.4.5.0.nupkg.sha512"
  ],
  "logs": []
}


================================================
File: NightRunner/obj/Debug/net9.0/NightRunner.AssemblyInfo.cs
================================================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("NightRunner")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+92d6c3ba823f015b541d6a0ea51ba3b941fe1740")]
[assembly: System.Reflection.AssemblyProductAttribute("NightRunner")]
[assembly: System.Reflection.AssemblyTitleAttribute("NightRunner")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.




================================================
File: NightRunner/obj/Debug/net9.0/NightRunner.AssemblyInfoInputs.cache
================================================
707f36f0be7e3c27024fb977fa8a1495167233a3c2c307e525fc0a3815091e3d



================================================
File: NightRunner/obj/Debug/net9.0/NightRunner.GeneratedMSBuildEditorConfig.editorconfig
================================================
is_global = true
build_property.TargetFramework = net9.0
build_property.TargetPlatformMinVersion = 
build_property.UsingMicrosoftNETSdkWeb = 
build_property.ProjectTypeGuids = 
build_property.InvariantGlobalization = 
build_property.PlatformNeutralAssembly = 
build_property.EnforceExtendedAnalyzerRules = 
build_property._SupportedPlatformList = Linux,macOS,Windows
build_property.RootNamespace = NightRunner
build_property.ProjectDir = C:\Users\Danny\git\monogame-nightrunner\NightRunner\
build_property.EnableComHosting = 
build_property.EnableGeneratedComInterfaceComImportInterop = 
build_property.EffectiveAnalysisLevelStyle = 9.0
build_property.EnableCodeStyleSeverity = 



================================================
File: NightRunner/obj/Debug/net9.0/NightRunner.GlobalUsings.g.cs
================================================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;



================================================
File: NightRunner/obj/Debug/net9.0/NightRunner.assets.cache
================================================
[Non-text file]


================================================
File: NightRunner/obj/Debug/net9.0/NightRunner.csproj.AssemblyReference.cache
================================================
[Non-text file]


================================================
File: NightRunner/obj/Debug/net9.0/nightrun.94946BAE.Up2Date
================================================



================================================
File: NightRunner/obj/Debug/net9.0/nightrunner.csproj.CoreCompileInputs.cache
================================================
6f4d522458a0f1652707fb2b699d03c9b97f6d341604dfb72123902536a58c91



================================================
File: NightRunner/obj/Debug/net9.0/nightrunner.genruntimeconfig.cache
================================================
95fa923983a34443b2312a8cc1d9204a2f6f19ae1ad47624609ff7584de729f0



================================================
File: NightRunner/obj/Debug/net9.0/nightrunner.sourcelink.json
================================================
{"documents":{"c:\\Users\\Danny\\git\\monogame-nightrunner\\*":"https://raw.githubusercontent.com/nightconcept/monogame-nightrunner/00376fd25a210b8572afe1fead337943c099fdca/*"}}


================================================
File: NightRunner/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs
================================================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]






================================================
File: NightRunner/src/Engine/Debug/Debug.cs
================================================
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using ScarletEngine.Managers;

namespace NightRunner.Engine.Core
{
  public class ScarletDebug : Game
  {
    private GraphicsDeviceManager _graphics;
    private SpriteBatch _spriteBatch;

    public ScarletDebug()
    {
      ConfigManager.Initialize(); // Initialize ConfigManager first

      _graphics = new GraphicsDeviceManager(this);
      Content.RootDirectory = "Content";
      IsMouseVisible = true;
    }

    protected override void Initialize()
    {
      // Configure window properties using ConfigManager
      Window.Title = ConfigManager.GetString("window.title", "Scarlet Engine (Default)");
      _graphics.PreferredBackBufferWidth = ConfigManager.GetInt("window.width", 800);
      _graphics.PreferredBackBufferHeight = ConfigManager.GetInt("window.height", 600);
      _graphics.ApplyChanges();

      // TODO: Add your initialization logic here
      LogManager.Info("ScarletGame Initialize: Started");
      LogManager.Debug("This is a debug message from Initialize.");
      LogManager.Warning("This is a warning message from Initialize.");
      LogManager.Error("This is an error message from Initialize.");
      LogManager.Info("ScarletGame Initialize: Finished");

      base.Initialize();
    }

    protected override void LoadContent()
    {
      _spriteBatch = new SpriteBatch(GraphicsDevice);

      // TODO: use this.Content to load your game content here
    }

    protected override void Update(GameTime gameTime)
    {
      if (Keyboard.GetState().IsKeyDown(Keys.Escape))
        Exit();

      // TODO: Add your update logic here

      base.Update(gameTime);
    }

    protected override void Draw(GameTime gameTime)
    {
      GraphicsDevice.Clear(Color.CornflowerBlue);

      // TODO: Add your drawing code here

      base.Draw(gameTime);
    }
  }
}



================================================
File: NightRunner/src/Engine/Managers/AssetManager.cs
================================================
// AssetManager: Manages loading and caching of game assets.
// Implements basic texture loading and caching.

using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;

namespace ScarletEngine.Managers
{
    /// <summary>
    /// Manages loading and caching of game assets, starting with textures.
    /// </summary>
    public class AssetManager
    {
        private readonly ContentManager _contentManager;
        private readonly Dictionary<string, Texture2D> _textureCache;
        private static bool _isInitialized = false; // To track if an instance is globally managed, if needed.
                                                 // For now, instance is managed by ScarletGame.

        /// <summary>
        /// Title: Asset Manager
        /// Purpose: Loads and caches game assets, primarily textures.
        /// </summary>
        public AssetManager(ContentManager contentManager)
        {
            if (contentManager == null)
            {
                // # Reason: ContentManager is essential for AssetManager to function.
                LogManager.Error("AssetManager: ContentManager cannot be null.");
                throw new ArgumentNullException(nameof(contentManager), "ContentManager is required for AssetManager.");
            }
            _contentManager = contentManager;
            _textureCache = new Dictionary<string, Texture2D>();
            _isInitialized = true; // Instance specific initialization
            LogManager.Info("AssetManager initialized.");
        }

        /// <summary>
        /// Loads a Texture2D asset.
        /// If the texture is already cached, returns the cached instance.
        /// Otherwise, loads from ContentManager, caches it, and returns it.
        /// </summary>
        /// <param name="assetName">The name of the texture asset to load (e.g., "Textures/player_ship").</param>
        /// <returns>The loaded Texture2D.</returns>
        /// <exception cref="ContentLoadException">Thrown if the asset cannot be loaded.</exception>
        /// <exception cref="ArgumentException">Thrown if assetName is null or empty.</exception>
        public Texture2D LoadTexture(string assetName)
        {
            if (string.IsNullOrEmpty(assetName))
            {
                LogManager.Error("AssetManager.LoadTexture: assetName cannot be null or empty.");
                throw new ArgumentException("Asset name cannot be null or empty.", nameof(assetName));
            }

            if (_textureCache.TryGetValue(assetName, out Texture2D cachedTexture))
            {
                LogManager.Debug($"AssetManager: Returning cached texture '{assetName}'.");
                return cachedTexture;
            }

            try
            {
                Texture2D loadedTexture = _contentManager.Load<Texture2D>(assetName);
                if (loadedTexture != null)
                {
                    _textureCache[assetName] = loadedTexture;
                    LogManager.Info($"AssetManager: Loaded and cached texture '{assetName}'.");
                    return loadedTexture;
                }
                else
                {
                    // This case should ideally be caught by ContentLoadException by MonoGame's ContentManager
                    LogManager.Error($"AssetManager: ContentManager returned null for texture '{assetName}' without throwing an exception. This is unexpected.");
                    throw new ContentLoadException($"AssetManager: Failed to load texture '{assetName}', ContentManager returned null.");
                }
            }
            catch (ContentLoadException ex)
            {
                LogManager.Error($"AssetManager: Failed to load texture '{assetName}'. Error: {ex.Message}");
                // # Reason: Re-throwing allows the caller to handle the content loading failure as per AC3.
                throw; 
            }
            catch (Exception ex)
            {
                // Catch any other unexpected exceptions during loading
                LogManager.Error($"AssetManager: An unexpected error occurred while loading texture '{assetName}'. Error: {ex.Message}");
                throw new ContentLoadException($"AssetManager: An unexpected error occurred while loading texture '{assetName}'. See inner exception.", ex);
            }
        }

        /// <summary>
        /// Unloads all cached assets.
        /// Note: This will dispose of textures loaded by this AssetManager instance.
        /// The underlying ContentManager might have its own lifecycle for unloading.
        /// </summary>
        public void UnloadAllAssets()
        {
            // # Reason: Disposing textures is important for memory management.
            // However, direct disposal might conflict if ContentManager also manages them.
            // For now, we clear the cache. MonoGame's ContentManager handles actual disposal on game exit or its own Unload.
            // If specific textures need explicit disposal earlier, a targeted UnloadTexture method would be needed.
            _textureCache.Clear();
            LogManager.Info("AssetManager: All cached texture references cleared.");
            // If _contentManager.Unload() is desired here, it would unload ALL content loaded by this ContentManager instance,
            // which might be too broad if this ContentManager is shared.
            // Typically, the main Game class's ContentManager is unloaded globally.
        }
    }
}


================================================
File: NightRunner/src/Engine/Managers/ConfigManager.cs
================================================
using System;
using System.Collections.Generic;

namespace ScarletEngine.Managers
{
    /// <summary>
    /// Manages engine and game configuration settings.
    /// For MVP, settings are hardcoded.
    /// </summary>
    public static class ConfigManager
    {
        private static readonly Dictionary<string, object> _settings = new Dictionary<string, object>();
        private static bool _isInitialized = false;

        /// <summary>
        /// Initializes the ConfigManager with default settings.
        /// This method should be called once at the start of the game.
        /// </summary>
        public static void Initialize()
        {
            if (_isInitialized)
            {
                LogManager.Warning("ConfigManager is already initialized.");
                return;
            }

            // Default settings for MVP
            _settings["window.title"] = "Scarlet Engine";
            _settings["window.width"] = 1280;
            _settings["window.height"] = 720;
            // Add other default configurations here as needed

            _isInitialized = true;
            LogManager.Info("ConfigManager initialized with default settings.");
        }

        /// <summary>
        /// Retrieves a configuration value of a specified type.
        /// </summary>
        /// <typeparam name="T">The type of the value to retrieve.</typeparam>
        /// <param name="key">The key of the configuration value.</param>
        /// <param name="defaultValue">The value to return if the key is not found or the type is incorrect.</param>
        /// <returns>The configuration value, or the defaultValue if not found or type mismatch.</returns>
        public static T Get<T>(string key, T defaultValue = default)
        {
            if (!_isInitialized)
            {
                LogManager.Error("ConfigManager not initialized. Call Initialize() first.");
                // Attempt to initialize now, though this is not ideal.
                // Consider throwing an exception or ensuring Initialize is called at startup.
                Initialize(); 
            }

            if (_settings.TryGetValue(key, out object value))
            {
                try
                {
                    return (T)Convert.ChangeType(value, typeof(T));
                }
                catch (InvalidCastException ex)
                {
                    LogManager.Error($"ConfigManager: Could not cast value for key '{key}' to type {typeof(T)}. Value was '{value}'. Error: {ex.Message}");
                    return defaultValue;
                }
                catch (Exception ex) // Catch other potential conversion errors
                {
                    LogManager.Error($"ConfigManager: Error converting value for key '{key}'. Value: '{value}', Target Type: {typeof(T)}. Error: {ex.Message}");
                    return defaultValue;
                }
            }

            LogManager.Warning($"ConfigManager: Key '{key}' not found. Returning default value '{defaultValue}'.");
            return defaultValue;
        }

        // Convenience methods (optional, but good practice)

        /// <summary>
        /// Retrieves a string configuration value.
        /// </summary>
        public static string GetString(string key, string defaultValue = "")
        {
            return Get<string>(key, defaultValue);
        }

        /// <summary>
        /// Retrieves an integer configuration value.
        /// </summary>
        public static int GetInt(string key, int defaultValue = 0)
        {
            return Get<int>(key, defaultValue);
        }

        /// <summary>
        /// Retrieves a float configuration value.
        /// </summary>
        public static float GetFloat(string key, float defaultValue = 0f)
        {
            return Get<float>(key, defaultValue);
        }

        /// <summary>
        /// Retrieves a boolean configuration value.
        /// </summary>
        public static bool GetBool(string key, bool defaultValue = false)
        {
            return Get<bool>(key, defaultValue);
        }
    }
}


================================================
File: NightRunner/src/Engine/Managers/LogManager.cs
================================================
using System;
using System.Globalization;

namespace ScarletEngine.Managers
{
    /// <summary>
    /// Provides basic logging capabilities to the console.
    /// </summary>
    public static class LogManager
    {
        /// <summary>
        /// Defines the severity levels for log messages.
        /// </summary>
        public enum LogLevel
        {
            Info,
            Warning,
            Error,
            Debug
        }

        private static void Log(LogLevel level, string message)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
            Console.WriteLine($"[{timestamp}] [{level}] {message}");
        }

        /// <summary>
        /// Logs an informational message.
        /// </summary>
        /// <param name="message">The message to log.</param>
        public static void Info(string message)
        {
            Log(LogLevel.Info, message);
        }

        /// <summary>
        /// Logs a warning message.
        /// </summary>
        /// <param name="message">The message to log.</param>
        public static void Warning(string message)
        {
            Log(LogLevel.Warning, message);
        }

        /// <summary>
        /// Logs an error message.
        /// </summary>
        /// <param name="message">The message to log.</param>
        public static void Error(string message)
        {
            Log(LogLevel.Error, message);
        }

        /// <summary>
        /// Logs a debug message.
        /// </summary>
        /// <param name="message">The message to log.</param>
        public static void Debug(string message)
        {
            // Basic implementation: For a real debug log, you might want to
            // compile this out in Release builds or use a conditional attribute.
            #if DEBUG
            Log(LogLevel.Debug, message);
            #endif
        }
    }
}




================================================
File: docs/PRD.md
================================================
# Scarlet Engine Product Requirements Document (PRD)

## Intro

The Scarlet Engine is a 2D game engine being developed in C# using the MonoGame framework (targeting version 3.8.2+ and .NET 9). This project is a direct port and enhancement of an existing mature Lua-based engine, the "Peace Game Engine." The Minimum Viable Product (MVP) for the Scarlet Engine aims to achieve functional parity with Milestone 4 of the Peace Game Engine's task list. This includes the capability to run the `test_scene4.lua` (a shmup prototype) with all its core functionalities, effectively demonstrating a successful port of the essential engine components and features. The primary driver for this port is to leverage C#'s static typing for improved code robustness, benefit from better AI-assisted coding, and utilize a more widely known programming language.

## Goals and Context

- **Project Objectives:**
    - Successfully port all core manager functionalities from the Lua-based Peace Game Engine to C#/MonoGame.
    - Replicate the core Entity-Component-System (ECS) architecture and its associated components and systems in C#.
    - Achieve functional parity with "Milestone 4: Event Handling and Input Management" of the original engine, enabling the `test_scene4.lua` shmup prototype to run on the Scarlet Engine.
    - Create a foundational C# game engine that can serve as the basis for the "NightRunner" game and future 2D game development projects.
- **Measurable Outcomes:**
    - `test_scene4.lua` (and preceding test scenes `test_scene.lua` through `test_scene3.lua`) from the Peace Game Engine can be executed within the Scarlet Engine, exhibiting the same core functionalities and behaviors.
    - All managers listed in the project brief are ported and functional.
    - The specified ECS components and systems are implemented and operational.
- **Success Criteria:**
    - The `test_scene4.lua` shmup prototype runs on Scarlet Engine with all core gameplay features present in the original Lua version (player movement, shooting, basic enemy behavior if part of that scene, rendering, input handling, sound).
    - The primary developer (the target audience) can successfully build, run, and debug test scenes within the Scarlet Engine using VS Code and C# Dev Kit.
    - The core engine architecture (managers, ECS) mirrors the design principles of the Peace Game Engine, adapted for C# idioms.
- **Key Performance Indicators (KPIs):**
    - Percentage of Peace Game Engine Milestone 4 functionalities successfully ported and verified in `test_scene4.lua`.
    - Successful execution of all ported test scenes (`test_scene.lua` - `test_scene4.lua`).
    - Subjective assessment by the primary developer on the ease of use, debugging, and extension of the C# engine compared to the Lua version.

## Scope and Requirements (MVP / Current Version)

### Functional Requirements (High-Level)

- **Core Engine Orchestration:**
    - Main game loop implementation (equivalent to LÃ–VE callbacks like `load`, `update`, `draw`).
    - Window and graphics device initialization and management via MonoGame.
- **Manager Porting & Implementation:**
    - `SceneManager`: Manages game states and scene transitions.
    - `AssetManager`: Loads and manages game assets (textures, sounds, fonts) using MonoGame's Content Pipeline.
    - `InputManager`: Handles keyboard, mouse, and gamepad input, including mapping raw inputs to logical actions (with `gamecontrollerdb.txt` equivalent support).
    - `ConfigManager`: Loads and provides access to engine and game configuration data.
    - `EventManager`: Facilitates a decoupled event/messaging system between engine components.
    - `RenderManager`: Manages rendering, including viewport/resolution scaling, layer management (equivalent to `shove.lua` features), and basic drawing primitives (sprites, shapes, text).
    - `SoundManager`: Handles loading and playback of sound effects and music.
    - `UIManager`: Provides basic capabilities for rendering debug and test UIs.
    - `CameraManager`: Manages game camera(s), including positioning, and transformations.
    - `LogManager`: Provides structured logging capabilities.
- **ECS Core Implementation (preference: Arch ECS):**
    - `Entity` creation and management.
    - `Component` management for: `Position`, `Sprite`, `Velocity`, `PlayerControlled`, `Collider`, and other components necessary for `test_scene4.lua`.
    - `System` implementation for: `MovementSystem`, `RenderSystem`, `CollisionSystem` (basic AABB or similar for `test_scene4.lua`), and other systems required for `test_scene4.lua`.
- **Scene Implementation:**
    - A base `Scene` class structure for C#.
    - Porting of test scenes from Lua to C# equivalent functionality, up to `test_scene4.lua`.
- **Rendering Capabilities:**
    - Rendering of sprites (textures).
    - Basic shape rendering (for debug/prototyping if needed by test scenes).
    - Text rendering (for debug/UI).
    - Implementation of viewport/layering features analogous to `shove.lua`.
- **Input Handling:**
    - Processing of keyboard, mouse (if applicable for tests), and gamepad inputs.
    - Mapping of physical inputs to logical game actions.
- **Audio:**
    - Playback of basic sound effects as required by `test_scene4.lua`.

### Non-Functional Requirements (NFRs)

- **Performance:** The engine must run `test_scene4.lua` smoothly on target platforms (Windows, Linux, macOS) without noticeable performance degradation compared to the original Lua version (acknowledging potential C#/MonoGame overheads/benefits).
- **Scalability:** While the MVP focuses on `test_scene4.lua`, the architecture should be clean and allow for future expansion with more complex games and features.
- **Reliability/Availability:** The engine should be stable during the execution of test scenes. Errors should be logged appropriately.
- **Security:** Not a primary focus for MVP beyond standard good practices in C# development. No specific security features like authentication are required for the engine MVP itself.
- **Maintainability:** Code should be well-organized, follow C# best practices, be appropriately commented, and leverage static typing to improve clarity and reduce errors. The structure should generally follow the patterns of the original Peace Game Engine where sensible.
- **Usability/Accessibility:** The primary user is the developer. The engine API should be understandable and usable. No end-user UI accessibility requirements for the engine MVP.
- **Other Constraints:**
    - Must use C# and MonoGame 3.8.2+ with .NET 9.
    - Development environment: VS Code with C# Dev Kit.
    - ECS: Arch ECS is the initial preference.
    - Platform targets: Windows, Linux, macOS.

### User Experience (UX) Requirements (High-Level)

- The primary "user" for the MVP is the developer.
- The engine's structure and APIs should be logical and relatively easy to understand for someone familiar with the Peace Game Engine's design and C#.
- Debugging test scenes should be straightforward using standard C# debugging tools.
- No specific end-user UI/UX is defined for the engine MVP itself, as `test_scene4.lua` is a prototype with minimal UI. Any UI elements within the test scene are part of its direct porting.

### Integration Requirements (High-Level)

- The engine must integrate with MonoGame libraries for graphics, input, audio, and content management.
- Potential integration with Arch ECS library.
- Potential integration with a C# library for `shove.lua` equivalent functionality (viewport/layering) if a suitable one is found.

### Testing Requirements (High-Level)

- The primary method of testing for MVP is the successful execution and functional parity of ported test scenes, especially `test_scene4.lua`.
- Unit tests for critical engine components (e.g., specific manager logic, ECS core functions) are encouraged but secondary to functional parity of test scenes for MVP.
- _(See `docs/testing-strategy.md` for details)_

## Epic Overview (MVP / Current Version)

- **Epic 1: Core Engine Foundation & Setup** - Goal: Establish the basic C#/MonoGame project structure, core game loop, windowing, and essential utility managers (Log, Config).
- **Epic 2: Asset and Scene Management Implementation** - Goal: Implement core AssetManager for loading content via MonoGame's pipeline and SceneManager for handling different game states/scenes. Port initial simple test scene.
- **Epic 3: Input Management Implementation** - Goal: Implement InputManager for handling keyboard, mouse, and gamepad, including action mapping.
- **Epic 4: Basic ECS Implementation** - Goal: Integrate or implement the chosen ECS framework (Arch ECS), define core components (Position, Sprite), and a basic RenderSystem to draw entities. Port a test scene demonstrating ECS rendering.
- **Epic 5: Advanced Rendering (shove.lua features) & Camera** - Goal: Implement RenderManager with `shove.lua` equivalent features (viewport, layers, scaling) and CameraManager.
- **Epic 6: Event Management & Sound Implementation** - Goal: Implement EventManager for decoupled communication and SoundManager for audio playback.
- **Epic 7: Core Gameplay Systems & Components** - Goal: Implement remaining core components (Velocity, PlayerControlled, Collider) and systems (Movement, Collision) needed for `test_scene4.lua`.
- **Epic 8: UI Manager (Basic) & Test Scene Parity** - Goal: Implement a basic UIManager for debug/test UI and ensure `test_scene.lua` through `test_scene3.lua` are fully ported and functional.
- **Epic 9: `test_scene4.lua` (Shmup Prototype) Port & MVP Finalization** - Goal: Complete the port of `test_scene4.lua` with all its functionalities, achieving MVP functional parity.

## Key Reference Documents

- `docs/product-brief.md`
- `docs/architecture.md` (to be created by Architect)
- `docs/epic1.md` through `docs/epic9.md` (to be created)
- `docs/tech-stack.md` (to be created by Architect, reflecting these requirements)
- `docs/testing-strategy.md` (to be created)
- `docs/peace-engine-analysis.md` (Optional: a document detailing specific Peace Game Engine features to port, if deeper analysis is needed beyond `TASK.MD` and `PLANNING.MD` from Peace Engine)

## Post-MVP / Future Enhancements

- Porting of "NightRunner" game itself.
- Advanced rendering features (shaders, lighting).
- More sophisticated UI system.
- Physics engine integration or development.
- Networking capabilities.
- Support for additional platforms (Android/iOS).
- Editor tooling.
- Expanded suite of common components and systems.



================================================
File: docs/architecture.md
================================================
# Scarlet Engine Architecture Document

## 1. Technical Summary

The Scarlet Engine is a 2D game engine being developed in C# (targeting version 13) using .NET 9 and the MonoGame framework (version 3.8.2+). This project is a direct port and enhancement of an existing Lua-based engine, the "Peace Game Engine." The primary goals for the MVP are to achieve functional parity with Milestone 4 of the Peace Game Engine, focusing on running its test scenes, particularly `test_scene4.lua` (a shmup prototype).

The architecture prioritizes a clear separation of concerns, modularity through a manager-based system, and a data-oriented approach using an Entity-Component-System (ECS) pattern with the Arch ECS library. Key objectives include leveraging C#'s static typing for improved code robustness, benefiting from better AI-assisted coding, and creating a reusable engine foundation for future 2D game development, starting with "NightRunner."

The engine is designed as a logically distinct set of modules and namespaces (`NightRunner.Engine.*`) within the main game application (`NightRunner.csproj`), rather than a separate class library. This provides a "soft wall" for organizational clarity while maintaining a single project for development and deployment.

## 2. High-Level Overview

The Scarlet Engine adopts a **Modular Engine within Application** architecture. The core engine code is organized into a dedicated `src/Engine/` directory and distinct namespaces within the `NightRunner` project. This provides foundational services and game logic capabilities directly consumable by the game-specific parts of the `NightRunner` application.

The primary flow involves the `NightRunner` application initializing its embedded Scarlet Engine components, which then integrate with the main game loop (input, update, rendering). Scenes, managed by the `SceneManager`, dictate the current game state and behavior. The Arch ECS framework is central to managing entity state and processing game logic through systems.

### System Context Diagram

```mermaid
graph TD
    User["User (Player/Developer)"] -->|Interacts With| GameApp["NightRunner Game Application"];
    subgraph GameApp
        direction LR
        GameSpecificCode["Game-Specific Code (Scenes, Logic)"]
        ScarletEngineModule["ScarletEngine (Engine Module)"]
    end
    GameSpecificCode -->|Uses| ScarletEngineModule;
    ScarletEngineModule -->|Leverages| MonoGame["MonoGame Framework"];
    ScarletEngineModule -->|Utilizes| ArchECS["Arch ECS Library"];
    ScarletEngineModule -->|Utilizes| MGE["MonoGame.Extended Library"];
    MonoGame -->|Interacts With| OS["Operating System (Win/Lin/Mac)"];
    OS -->|Provides Input/Output| User;
    GameApp -->|Loads Assets Via| ContentPipeline["MonoGame Content Pipeline"];
```

## 3. Component View

The Scarlet Engine module is composed of several key logical components, primarily organized into Managers, an ECS Core, and general Core/Utility services, all residing within the `NightRunner.csproj` under the `src/Engine/` directory and `NightRunner.Engine` namespace.

### Engine Components Diagram

```mermaid
graph TD
    subgraph NightRunnerProject ["NightRunner Project (nightrunner.csproj)"]
        direction TB
        EntryPoint["Program.cs / Game1.cs (NightRunnerGame Host)"]

        subgraph GameSpecificCode ["Game-Specific Code (e.g., NightRunner.GameLogic)"]
            direction TB
            GameLogicScenes["Game Scenes (e.g., TitleScene, Levels in NR/src/GameLogic/GameScenes/)"]
            GameLogicComponents["Game-Specific Components (in NR/src/GameLogic/GameComponents/)"]
            GameLogicSystems["Game-Specific Systems (in NR/src/GameLogic/GameSystems/)"]
        end

        subgraph ScarletEngineModule ["ScarletEngine Module (NightRunner.Engine.*)"]
            direction LR
            EngineCore["Engine Core (Game Loop Hooks, Services, e.g., ScarletGame.cs)"]
            EngineTestScenes["Test Scenes (Engine Validation, e.g., TestScene1-4 in NR/src/Engine/TestScenes/)"]

            subgraph Managers ["Service Managers"]
                direction TB
                SM["SceneManager"]
                AM["AssetManager"]
                IM["InputManager"]
                RM["RenderManager"]
                ConfM["ConfigManager"]
                EM["EventManager"]
                SoundM["SoundManager"]
                CamM["CameraManager"]
                LogM["LogManager"]
                UIM["UIManager"]
            end

            subgraph ECSCore ["ECS Core (Arch ECS)"]
                direction TB
                ECSWorld["ECS World"]
                Components["Components (Data Definitions)"]
                Systems["Systems (Logic Processing)"]
            end

            EngineCore -.-> Managers;
            EngineCore -.-> ECSCore;
            EngineCore -.-> EngineTestScenes; %% Engine core might provide base classes or utilities for its test scenes
            Managers <-.-> ECSCore;
            RM -.->|Uses| MGE_Viewport["MonoGame.Extended (Viewport/Camera)"];
            AM -.->|Uses| MG_Content["MonoGame ContentManager"];
            ECSWorld -- "Manages" --> Components;
            ECSWorld -- "Invokes" --> Systems;
            Systems -- "Operate On" --> Components;
            EngineTestScenes -- "Use" --> Managers;
            EngineTestScenes -- "Interact With" --> ECSWorld;
        end

        EntryPoint -->|Initializes & Runs| EngineCore;
        EntryPoint -->|Can Initiate| EngineTestScenes; %% Host can run engine test scenes
        EntryPoint -->|Manages/Runs| GameSpecificCode;
        GameSpecificCode -->|Uses & Extends| ScarletEngineModule;
        GameLogicScenes -- "Use" --> Managers;
        GameLogicScenes -- "Interact With" --> ECSWorld;
    end
```


### Component Responsibilities:

- **Engine Core (`NightRunner.Engine.Core`):**
    - Orchestrates engine initialization and manages the integration with the MonoGame game loop (`Initialize`, `LoadContent`, `Update`, `Draw`) via the main engine game class (e.g., `ScarletGame` in `NightRunner/src/Engine/Core/`).
    - Provides access to global engine services and managers.
- **Managers (within `NightRunner.Engine.Managers` and other engine namespaces):**
    - `AssetManager`: Loads and caches game assets (textures, sounds, fonts) via MonoGame's Content Pipeline.
    - `CameraManager`: Manages 2D game camera(s), including position, zoom, rotation, and view transformations. Works with `RenderManager`.
    - `ConfigManager`: Loads and provides access to engine and game configuration data from files (JSON/XML).
    - `EventManager`: Facilitates a decoupled event/messaging system using C# events or custom event types.
    - `InputManager`: Handles keyboard, mouse, and gamepad input, mapping raw inputs to logical actions. Supports `gamecontrollerdb.txt` equivalent.
    - `LogManager`: Provides structured, timestamped console logging for engine events, warnings, and errors.
    - `RenderManager`: Manages all rendering operations. Implements `shove.lua`-equivalent functionality for viewport management, resolution scaling (using `MonoGame.Extended.ViewportAdapters`), and rendering layers. Owns and manages `SpriteBatch` instances.
    - `SceneManager`: Manages game scenes (states) and transitions between them, handling `LoadContent`, `Update`, `Draw` calls for the active scene.
    - `SoundManager`: Handles loading and playback of sound effects and music.
    - `UIManager`: Provides basic capabilities for rendering debug information and simple UI elements for test scenes.
- **ECS Core (within `NightRunner.Engine.ECS`, using Arch ECS):**
    - `ECS World`: The Arch ECS `World` instance that manages entities, components, and systems. Scenes will typically own or manage a world instance.
    - `Components`: Plain data structures (structs/classes) defining the state of entities (e.g., `PositionComponent`, `SpriteComponent`). Defined in `docs/data-models.md`.
    - `Systems`: Classes containing the logic that operates on entities with specific sets of components (e.g., `MovementSystem`, `RenderSystem`, `CollisionSystem`).
- **Engine Test Scenes (`NightRunner.Engine.TestScenes`):**
    - A collection of scenes (e.g., `TestScene1` to `TestScene4` ported from Peace Engine) residing within the engine's module.
    - Used for validating core engine functionalities, demonstrating features, and ensuring functional parity with original prototypes.
    - These scenes are run by the `NightRunner` application host.
- **Game Application (`NightRunner.csproj`):**
    - Contains the main game entry point (`Program.cs`, and the main game class like `Game1.cs` or `NightRunnerGame.cs` which acts as a host).
    - Initializes and runs the Scarlet Engine components.
    - Can initiate and run test scenes provided by the `NightRunner.Engine.TestScenes` module for debugging or validation.
    - Defines game-specific scenes (e.g., in `NightRunner/src/GameLogic/GameScenes/`), components (in `NightRunner/src/GameLogic/GameComponents/`), and systems (in `NightRunner/src/GameLogic/GameSystems/`) that utilize the `NightRunner.Engine` modules for the actual "NightRunner" game.
    - (Reference `docs/project-structure.md` for detailed file layout).

## 4. Key Architectural Decisions & Patterns

- **Primary Technology Stack:** C# 13, .NET 9, MonoGame 3.8.2+. (See `docs/tech-stack.md`).
- **Engine as an Internal Module:** The Scarlet Engine is developed as a logically distinct set of modules (folders and namespaces, e.g., `NightRunner.Engine.*`) within the main `NightRunner.csproj` project. This promotes modularity and reusability internally, with a "soft wall" for organization, without the overhead of a separate library file.
- **Manager Pattern:** Centralized services (Asset, Input, Scene, etc.) are provided as singleton or easily accessible manager classes within the engine module.
- **Entity-Component-System (ECS):** Arch ECS is the chosen library for managing game entities and their logic, promoting data-oriented design and composition over inheritance. (See `docs/data-models.md`).
- **Resolution & Viewport Management:** `MonoGame.Extended.ViewportAdapters` and `Camera2D` will be used within the `RenderManager` to handle virtual resolution, scaling (letterboxing/pillarboxing), and camera control, mimicking `shove.lua` features.
- **Rendering Layers:** The `RenderManager` will manage rendering order, initially through multiple `SpriteBatch` calls per layer or sorted drawing, to achieve effects similar to `shove.lua` layers.
- **Configuration Management:** Engine and game settings will be loaded from external files (e.g., JSON) by the `ConfigManager`. (See `docs/data-models.md` for example structures).
- **Event-Driven Communication:** An `EventManager` will be used for decoupled communication between different engine modules and game systems.
- **Coding Standards:** Adherence to the Google C# Style Guide. (See `docs/coding-standards.md`).
- **Testing Strategy:** MVP validation primarily through functional parity of ported test scenes. Unit tests (xUnit) for critical engine components. (See `docs/testing-strategy.md`).

## 5. Core Workflow / Sequence Diagram (Simplified Game Loop)

This diagram illustrates a simplified sequence of operations during a typical game loop tick. `SE Core` refers to the Scarlet Engine's core logic operating within the `GameApp`.

```mermaid
sequenceDiagram
    participant App as GameApp (NightRunner)
    participant SE_Core as ScarletEngine Core Logic
    participant InputMgr as InputManager
    participant EventMgr as EventManager
    participant SceneMgr as SceneManager
    participant ActiveScene as IScene (CurrentScene)
    participant ECSWorld as Arch ECS World
    participant Systems as ECS Systems
    participant RenderMgr as RenderManager

    Note over App, RenderMgr: Frame Start
    App->>SE_Core: Game.Update(gameTime)
    SE_Core->>InputMgr: Update(gameTime)
    InputMgr->>EventMgr: PublishInputEvents()
    SE_Core->>SceneMgr: UpdateActiveScene(gameTime)
    SceneMgr->>ActiveScene: Update(gameTime)
    ActiveScene->>ECSWorld: Update() %% Arch specific call if any, or direct system calls
    ECSWorld->>Systems: UpdateSystems(gameTime) %% Conceptual system update loop

    App->>SE_Core: Game.Draw(gameTime)
    SE_Core->>RenderMgr: BeginFrame()
    RenderMgr->>SceneMgr: DrawActiveScene(spriteBatch)
    SceneMgr->>ActiveScene: Draw(spriteBatch)
    ActiveScene->>ECSWorld: Draw() %% Or RenderSystems invoked via RenderManager
    ECSWorld->>Systems: DrawSystems(spriteBatch) %% Conceptual render system loop
    RenderMgr->>RenderMgr: PresentLayers()
    SE_Core->>RenderMgr: EndFrame()
    Note over App, RenderMgr: Frame End
```

## 6. Infrastructure and Deployment Overview

- **Cloud Provider(s):** Not applicable for the engine MVP, as it's a local desktop application.
- **Core Services Used:** Not applicable.
- **Infrastructure as Code (IaC):** Not applicable for MVP.
- **Deployment Strategy (MVP):**
    - "Deployment" refers to the ability of the primary developer to easily build and run the `NightRunner.csproj` application (which includes the Scarlet Engine code and its test scenes) on their development machines across Windows, Linux, and macOS.
    - Builds will be framework-dependent .NET 9 applications.
    - Standard `dotnet build` and `dotnet run` commands will be used.
- **Environments:** Primarily a "Development" environment for the MVP.

## 7. Key Reference Documents

- `docs/PRD.md` (Product Requirements Document)
- `docs/product-brief.md`
- `docs/tech-stack.md` (Technology Stack)
- `docs/project-structure.md` (Project Structure)
- `docs/coding-standards.md` (Coding Standards)
- `docs/data-models.md` (Data Models)
- `docs/testing-strategy.md` (Testing Strategy)
- `docs/api-reference.md` (To be created - will detail `NightRunner.Engine` public API)
- `docs/environment-vars.md` (To be created - likely minimal for MVP)
- Epic files (`docs/epic1.md` through `docs/epic9.md`)



================================================
File: docs/coding-standards.md
================================================
# Scarlet Engine Coding Standards and Patterns

This document outlines the C# coding standards and stylistic guidelines for the Scarlet Engine project. These standards are derived directly from the "C# at Google Style Guide" to ensure consistency and maintainability.

## 1. Naming Rules

Naming rules follow Microsoft’s C# naming guidelines. Where Microsoft’s naming guidelines are unspecified (e.g., private and local variables), rules are taken from the CoreFX C# coding guidelines.

**Rule Summary:**

* **Classes, Methods, Enumerations, Public Fields, Public Properties, Namespaces:** `PascalCase`
* **Local Variables, Parameters:** `camelCase`
* **Private, Protected, Internal, and Protected Internal Fields and Properties:** `_camelCase` (prefixed with an underscore)
* **Interfaces:** Names start with `I`, e.g., `IMyInterface`.
* **Modifiers:** Naming convention is unaffected by modifiers such as `const`, `static`, `readonly`, etc.
* **Casing Definition:** For casing, a “word” is anything written without internal spaces, including acronyms. For example, `MyRpc` instead of `MyRPC`.

### 1.1. Files

* Filenames and directory names are `PascalCase`, e.g., `MyFile.cs`.
* Where possible, the file name should be the same as the name of the main class in the file, e.g., `MyClass.cs`.
* In general, prefer one core class per file.

## 2. Formatting Guidelines

### 2.1. Organization

* **Modifiers Order:** Modifiers should occur in the following order:
    `public` `protected` `internal` `private` `new` `abstract` `virtual` `override` `sealed` `static` `readonly` `extern` `unsafe` `volatile` `async`.
* **`using` Declarations:**
    * Namespace `using` declarations go at the top of the file, before any namespace declarations.
    * `using` import order is alphabetical, apart from `System` imports which always go first.
* **Class Member Ordering:**
    * Group class members in the following order:
        1.  Nested classes, enums, delegates, and events.
        2.  Static, `const`, and `readonly` fields.
        3.  Fields and properties.
        4.  Constructors and finalizers.
        5.  Methods.
    * Within each group, elements should be in the following order:
        1.  Public
        2.  Internal
        3.  Protected internal
        4.  Protected
        5.  Private
    * Where possible, group interface implementations together.

### 2.2. Whitespace Rules

* A maximum of one statement per line.
* A maximum of one assignment per statement.
* **Indentation:** 2 spaces. No tabs.
* **Column Limit:** 100.
* **Braces:**
    * No line break before an opening brace.
    * No line break between a closing brace and `else`.
    * Braces are used even when optional (e.g., for single-line `if` statements or loops).
* **Spaces:**
    * Space after `if`/`for`/`while` etc., and after commas.
    * No space after an opening parenthesis or before a closing parenthesis.
    * No space between a unary operator and its operand.
    * One space between the operator and each operand of all other operators.
* **Line Wrapping:**
    * In general, line continuations are indented 4 spaces.
    * Line breaks with braces (e.g., list initializers, lambdas, object initializers, etc.) do not count as continuations (they follow their own indentation rules, typically 2 spaces for the block).
    * **Function Definitions and Calls:**
        * If arguments do not all fit on one line, they should be broken up onto multiple lines, with each subsequent line aligned with the first argument.
        * If there is not enough room for this alignment, arguments may instead be placed on subsequent lines with a four-space indent.

### 2.3. Example (from Google C# Style Guide)

```csharp
using System;                                       // `using` goes at the top, outside the
                                                    // namespace.
namespace MyNamespace {                             // Namespaces are PascalCase.
                                                    // Indent after namespace.
  public interface IMyInterface {                   // Interfaces start with 'I'
    public int Calculate(float value, float exp);   // Methods are PascalCase
                                                    // ...and space after comma.
  }

  public enum MyEnum {                              // Enumerations are PascalCase.
    Yes,                                            // Enumerators are PascalCase.
    No,
  }

  public class MyClass {                            // Classes are PascalCase.
    public int Foo = 0;                             // Public member variables are
                                                    // PascalCase.
    public bool NoCounting = false;                 // Field initializers are encouraged.
    private class Results {
      public int NumNegativeResults = 0;
      public int NumPositiveResults = 0;
    }
    private Results _results;                       // Private member variables are
                                                    // _camelCase.
    public static int NumTimesCalled = 0;
    private const int _bar = 100;                   // const does not affect naming
                                                    // convention.
    private int[] _someTable = {                    // Container initializers use a 2
      2, 3, 4,                                      // space indent.
    };

    public MyClass() {
      _results = new Results {
        NumNegativeResults = 1,                     // Object initializers use a 2 space
        NumPositiveResults = 1,                     // indent.
      };
    }

    public int CalculateValue(int mulNumber) {      // No line break before opening brace.
      var resultValue = Foo * mulNumber;            // Local variables are camelCase.
      NumTimesCalled++;
      Foo += _bar;

      if (!NoCounting) {                            // No space after unary operator and
                                                    // space after 'if'.
        if (resultValue < 0) {                      // Braces used even when optional and
                                                    // spaces around comparison operator.
          _results.NumNegativeResults++;
        } else if (resultValue > 0) {               // No newline between brace and else.
          _results.NumPositiveResults++;
        }
      }

      return resultValue;
    }

    public void ExpressionBodies() {
      // For simple lambdas, fit on one line if possible, no brackets or braces required.
      Func<int, int> increment = x => x + 1;

      // Closing brace aligns with first character on line that includes the opening brace.
      Func<int, int, long> difference1 = (x, y) => {
        long diff = (long)x - y;
        return diff >= 0 ? diff : -diff;
      };

      // If defining after a continuation line break, indent the whole body.
      Func<int, int, long> difference2 =
          (x, y) => {
            long diff = (long)x - y;
            return diff >= 0 ? diff : -diff;
          };

      // Inline lambda arguments also follow these rules. Prefer a leading newline before
      // groups of arguments if they include lambdas.
      CallWithDelegate(
          (x, y) => {
            long diff = (long)x - y;
            return diff >= 0 ? diff : -diff;
          });
    }

    void DoNothing() {}                             // Empty blocks may be concise.

    // If possible, wrap arguments by aligning newlines with the first argument.
    void AVeryLongFunctionNameThatCausesLineWrappingProblems(int longArgumentName,
                                                             int p1, int p2) {}

    // If aligning argument lines with the first argument doesn't fit, or is difficult to
    // read, wrap all arguments on new lines with a 4 space indent.
    void AnotherLongFunctionNameThatCausesLineWrappingProblems(
        int longArgumentName, int longArgumentName2, int longArgumentName3) {}

    void CallingLongFunctionName() {
      int veryLongArgumentName = 1234;
      int shortArg = 1;
      // If possible, wrap arguments by aligning newlines with the first argument.
      AnotherLongFunctionNameThatCausesLineWrappingProblems(shortArg, shortArg,
                                                            veryLongArgumentName);
      // If aligning argument lines with the first argument doesn't fit, or is difficult to
      // read, wrap all arguments on new lines with a 4 space indent.
      AnotherLongFunctionNameThatCausesLineWrappingProblems(
          veryLongArgumentName, veryLongArgumentName, veryLongArgumentName);
    }
  }
}
```

## 3. C# Coding Guidelines

### 3.1. Constants

- Variables and fields that can be made `const` should always be made `const`.
- If `const` isn’t possible, `readonly` can be a suitable alternative.
- Prefer named constants to magic numbers.

### 3.2. Collection Types (`IEnumerable` vs `IList` vs `IReadOnlyList`)

- **Inputs:** Use the most restrictive collection type possible (e.g., `IReadOnlyCollection<T>`, `IReadOnlyList<T>`, `IEnumerable<T>`) when the inputs should be immutable by the method.
- **Outputs:**
    - If passing ownership of the returned container to the caller, prefer `IList<T>` over `IEnumerable<T>`.
    - If not transferring ownership, prefer the most restrictive option.

### 3.3. Generators vs. Containers

Use your best judgment, bearing in mind:

- Generator code (using `yield return`) is often less readable than filling in a container.
- Generator code can be more performant if the results are going to be processed lazily (e.g., when not all results are needed).
- Generator code that is directly turned into a container via `ToList()` will be less performant than filling in a container directly.
- Generator code that is called multiple times will be considerably slower than iterating over a pre-filled container multiple times.

### 3.4. Property Styles

- For single-line read-only properties, prefer expression body properties (`=>`) when possible:
    
```C#
int SomeProperty => _someProperty;
```


- For everything else, use the older `{ get; set; }` syntax.

### 3.5. Expression Body Syntax

- Judiciously use expression body syntax in lambdas and properties.
- Don’t use on method definitions (this was to be reviewed when C# 7 was live; for C# 13, if this guidance has evolved within Google's internal standard, it would be updated. For now, adhering to the provided text).
- As with methods and other scoped blocks of code, align the closing brace with the first character of the line that includes the opening brace.

### 3.6. Structs vs. Classes

- Structs are value types; classes are reference types.
- Structs are always passed and returned by value. Assigning to a member of a returned struct modifies a copy.
- **Almost always use a class.**
- Consider `struct` when the type can be treated like other value types (e.g., instances are small, commonly short-lived, or commonly embedded in other objects). Good examples include `Vector3`, `Quaternion`.
- This guidance may vary if performance issues mandate the use of structs.

### 3.7. Lambdas vs. Named Methods

- If a lambda is non-trivial (e.g., more than a couple of statements, excluding declarations), or is reused in multiple places, it should probably be a named method.

### 3.8. Field Initializers

- Field initializers are generally encouraged.

### 3.9. Extension Methods

- Only use an extension method when the source of the original class is not available, or else when changing the source is not feasible.
- Only use an extension method if the functionality being added is a ‘core’ general feature that would be appropriate to add to the source of the original class.
    
    - If the maintainer of the original class (if source is available) does not want to add the function, prefer not using an extension method.
    
- Only put extension methods into core libraries that are available everywhere.
- Be aware that using extension methods always obfuscates the code, so err on the side of not adding them.

### 3.10. `ref` and `out` Parameters

- Use `out` for returns that are not also inputs.
- Place `out` parameters after all other parameters in the method definition.
- `ref` should be used rarely, only when mutating an input is necessary.
- Do not use `ref` as an optimization for passing structs.
- Do not use `ref` to pass a modifiable container into a method if the intent is only to modify the container's contents. `ref` is only required when the supplied container variable itself needs to be replaced with an entirely different container instance.

### 3.11. LINQ (Language Integrated Query)

- In general, prefer single-line LINQ calls and imperative code, rather than long chains of LINQ. Mixing imperative code and heavily chained LINQ is often hard to read.
- Prefer member extension methods over SQL-style LINQ keywords (e.g., prefer `myList.Where(x => ...)` to `from x in myList where ... select x`).
- Avoid `Container.ForEach(...)` for anything longer than a single statement.

### 3.12. `Array` vs. `List<T>`

- In general, prefer `List<T>` over arrays for public variables, properties, and return types (keeping in mind the guidance on `IList<T>` / `IEnumerable<T>` / `IReadOnlyList<T>` above).
- Prefer `List<T>` when the size of the container can change.
- Prefer arrays when the size of the container is fixed and known at construction time.
- Prefer `T[]` for multidimensional arrays (e.g., `int[,]`).
- Note: `array` and `List<T>` both represent linear, contiguous containers. Arrays are of fixed capacity; `List<T>` can be added to. In some cases, arrays are more performant, but `List<T>` is generally more flexible.

### 3.13. Folders and File Locations

- Be consistent with the project.
- Prefer a flat structure where possible. _(Architect Note: This will be balanced with the need for clear module separation outlined in `docs/project-structure.md` for a larger engine project.)_

### 3.14. Use of `Tuple` as a Return Type

- In general, prefer a named class or struct type over `System.Tuple<>` or value tuples `(Type1, Type2)`, particularly when returning complex types or when the elements are not self-explanatory.

### 3.15. String Manipulation (`Interpolation` vs. `String.Format()` vs. `String.Concat` vs. `operator+`)

- In general, use whatever is easiest to read, particularly for logging and assert messages. String interpolation (`$"{variable}"`) is often preferred for readability.
- Be aware that chained `operator+` concatenations will be slower and cause significant memory churn.
- If performance is a concern for multiple string concatenations, `StringBuilder` will be faster.

### 3.16. `using` Aliases for Types

- Generally, don’t alias long type names with `using SomeAlias = Some.Very.Long.TypeName;`. This is often a sign that a `Tuple<>` needs to be turned into a proper class/struct, or the type itself is too complex.
- Be aware that `using` aliases are file-scoped and do not improve the public API for external users.

### 3.17. Object Initializer Syntax

- Example:
```c#
var x = new SomeClass {
  Property1 = value1,
  Property2 = value2,
};
```


- Object Initializer Syntax is fine for ‘plain old data’ (POD) types.
- Avoid using this syntax for classes or structs that have complex constructors or require specific construction logic beyond simple property setting.
- If splitting across multiple lines, indent one block level (2 spaces for the properties).

### 3.18. Namespace Naming

- In general, namespaces should be no more than 2 levels deep (e.g., `MyCompany.MyModule`). _(Architect Note: For ScarletEngine, we might use `Scarlet.Managers`, `ScarletEngine.ECS`, etc., which is 2 levels. This seems acceptable.)_
- Don’t force file/folder layout to strictly match namespaces if it harms clarity, but they should generally align.
- For shared library/module code (like `ScarletEngine`), use namespaces. For leaf ‘application’ code (like `NightRunner` game-specific code), namespaces are less critical but still good practice.
- New top-level namespace names must be globally unique and recognizable (e.g., `ScarletEngine`).

### 3.19. Default Values / Null Returns for Structs

- Prefer returning a ‘success’ boolean value and a struct `out` value:

```C#
public bool TryGetValue(out MyStruct value) { /* ... */ }
```

- Where performance isn’t a concern and the resulting code is significantly more readable (e.g., chained null conditional operators vs. deeply nested if statements), nullable structs (`MyStruct?`) are acceptable.
- Note: Nullable structs can reinforce a ‘null is failure’ pattern, which Google generally prefers to avoid. (A `StatusOr<T>` equivalent might be considered in the future if demand exists).

### 3.20. Calling Delegates

- When calling a delegate, use `Invoke()` and the null-conditional operator (`?.`):

```c#
SomeDelegate?.Invoke(args);
```

This clearly marks the call at the call site as ‘a delegate that is being called’. The null check is concise and robust against threading race conditions.

### 3.21. The `var` Keyword

Use of `var` is encouraged if it aids readability by avoiding type names that are noisy, obvious, or unimportant.

- **Encouraged:**
    - When the type is obvious: `var apple = new Apple();`, or `var request = Factory.Create<HttpRequest>();`
    - For transient variables that are only passed directly to other methods: `var item = GetItem(); ProcessItem(item);`
- **Discouraged:**
    - When working with basic types where the type itself is informative: `var success = true;` (prefer `bool success = true;`)
    - When working with compiler-resolved built-in numeric types where precision might be important: `var number = 12 * ReturnsFloat();` (prefer `float number = ...;` or `double number = ...;`)
    - When users would clearly benefit from knowing the type explicitly: `var listOfItems = GetList();` (prefer `List<MyItem> listOfItems = GetList();`)

### 3.22. Attributes

- Attributes should appear on the line above the field, property, or method they are associated with.
- Multiple attributes should each be on their own line, separated by newlines. This allows for easier adding/removing and ensures each attribute is easy to search for.

```c#
[Serializable]
[Obsolete("Use NewMethod instead.")]
public class MyOldClass { /* ... */ }
```

### 3.23. Argument Naming and Clarity

When the meaning of a function argument is nonobvious, consider:

- If the argument is a literal constant used in multiple calls, use a named constant.
- Consider changing a `bool` argument to an `enum` for self-describing values.
- Replace large or complex nested expressions passed as arguments with named variables.
- Consider using **Named Arguments** at the call site to clarify meaning:

```c#
CalculateProduct(values: myValues, options: myOptions, completionDelegate: null);
```


- For functions with several configuration options, consider defining a single class or struct to hold all options and pass an instance of that. This makes options named at the call site, reduces argument count, and simplifies adding new options later without changing existing call sites.

## 4. Architectural Patterns

(This section would typically list high-level patterns like ECS, Manager Pattern, etc. The Google Style Guide focuses on code-level style, so this section will remain high-level here and refer to other documents like `architecture.md` once created.)

- **Entity-Component-System (ECS):** Core architectural pattern for game entities and logic, using Arch ECS. (As decided)
- **Manager Pattern:** For global services like Asset Management, Input Management, Scene Management, etc. (As per project brief and common game engine design)
- Other patterns will be documented in the main `architecture.md` as they are formally adopted.



================================================
File: docs/data-models.md
================================================
# Scarlet Engine Data Models

## 1. Overview

This document outlines the structure of core data entities used within the Scarlet Engine. For the MVP, this primarily includes Entity-Component-System (ECS) components and the structure of configuration files.

## 2. Core ECS Components

Components are data containers that define the properties and state of entities. They are typically implemented as C# `structs` or simple classes. These will be used with the Arch ECS library.

### 2.1. `PositionComponent`

* **Description:** Represents the 2D position of an entity in the game world.
* **Schema / C# Definition:**
    ```csharp
    // Using Microsoft.Xna.Framework.Vector2 for convenience
    using Microsoft.Xna.Framework;

    namespace Scarlet.ECS.Components
    {
        public struct PositionComponent
        {
            public Vector2 Position; // World coordinates

            public PositionComponent(float x, float y)
            {
                Position = new Vector2(x, y);
            }

            public PositionComponent(Vector2 position)
            {
                Position = position;
            }
        }
    }
    ```

### 2.2. `VelocityComponent`

* **Description:** Represents the 2D velocity (speed and direction) of an entity, typically in units per second.
* **Schema / C# Definition:**
    ```csharp
    using Microsoft.Xna.Framework;

    namespace Scarlet.ECS.Components
    {
        public struct VelocityComponent
        {
            public Vector2 Velocity;

            public VelocityComponent(float x, float y)
            {
                Velocity = new Vector2(x, y);
            }

            public VelocityComponent(Vector2 velocity)
            {
                Velocity = velocity;
            }
        }
    }
    ```

### 2.3. `SpriteComponent`

* **Description:** Defines the visual representation of an entity using a texture atlas region or a whole texture.
* **Schema / C# Definition:**
    ```csharp
    using Microsoft.Xna.Framework;
    using Microsoft.Xna.Framework.Graphics;

    namespace Scarlet.ECS.Components
    {
        public struct SpriteComponent
        {
            // Name of the texture asset (e.g., loaded via AssetManager)
            public string TextureName;

            // Optional: Source rectangle if using a sprite sheet/atlas
            public Rectangle? SourceRectangle;

            // Tint color for the sprite (default: Color.White)
            public Color Tint;

            // Origin point for rotation and scaling (default: Vector2.Zero for top-left)
            public Vector2 Origin;

            // Scale factor (default: 1.0f for original size)
            public float Scale;

            // SpriteEffects for flipping (default: SpriteEffects.None)
            public SpriteEffects Effects;

            // Layer depth for sorting (0 for back, 1 for front; within a SpriteBatch call)
            public float LayerDepth;

            public SpriteComponent(string textureName)
            {
                TextureName = textureName;
                SourceRectangle = null;
                Tint = Color.White;
                Origin = Vector2.Zero;
                Scale = 1.0f;
                Effects = SpriteEffects.None;
                LayerDepth = 0f;
            }
        }
    }
    ```

### 2.4. `PlayerControlledComponent`

* **Description:** A component (can be a tag or hold data) indicating an entity is controlled by player input.
* **Schema / C# Definition:**
    ```csharp
    namespace Scarlet.ECS.Components
    {
        // For MVP, this can be a simple tag component.
        // It could be extended with player-specific attributes like move speed if needed.
        public struct PlayerControlledComponent
        {
            public float MoveSpeed; // Example: Units per second

            public PlayerControlledComponent(float moveSpeed = 100f)
            {
                MoveSpeed = moveSpeed;
            }
        }
    }
    ```

### 2.5. `ColliderComponent`

* **Description:** Defines an Axis-Aligned Bounding Box (AABB) for an entity, used for collision detection.
* **Schema / C# Definition:**
    ```csharp
    using Microsoft.Xna.Framework;

    namespace Scarlet.ECS.Components
    {
        public enum CollisionType
        {
            Solid,   // Blocks movement
            Trigger  // Detects overlap but doesn't block
        }

        public struct ColliderComponent
        {
            // Dimensions of the collider
            public float Width;
            public float Height;

            // Offset from the entity's PositionComponent.Position
            // (e.g., if PositionComponent.Position is center, Offset might be (-Width/2, -Height/2))
            public Vector2 Offset;

            // Type of collider (e.g., solid, trigger)
            public CollisionType Type;

            // Optional: Collision layer/mask for filtering collisions
            // public uint CollisionLayer;
            // public uint CollisionMask;

            public ColliderComponent(float width, float height, Vector2 offset, CollisionType type = CollisionType.Solid)
            {
                Width = width;
                Height = height;
                Offset = offset;
                Type = type;
            }

            // Helper to get the world-space bounds
            public Rectangle GetBounds(Vector2 entityPosition)
            {
                return new Rectangle(
                    (int)(entityPosition.X + Offset.X),
                    (int)(entityPosition.Y + Offset.Y),
                    (int)Width,
                    (int)Height
                );
            }
        }
    }
    ```

### 2.6. `BulletComponent`

* **Description:** A tag component identifying an entity as a bullet, potentially holding bullet-specific data in the future (e.g., damage, owner). For the MVP (`test_scene4.lua`), it's primarily a tag.
* **Schema / C# Definition:**
    ```csharp
    namespace Scarlet.ECS.Components
    {
        public struct BulletComponent
        {
            // Potentially add damage, ownerId, etc. in the future
            // For MVP, it can be a simple tag or hold very basic info.
            // public int OwnerEntityId; // Example
        }
    }
    ```

### 2.7. `LifetimeComponent`

* **Description:** Specifies a duration for which an entity should exist before being automatically removed. Useful for temporary effects, projectiles, etc.
* **Schema / C# Definition:**
    ```csharp
    namespace Scarlet.ECS.Components
    {
        public struct LifetimeComponent
        {
            public float RemainingSeconds;

            public LifetimeComponent(float lifetime)
            {
                RemainingSeconds = lifetime;
            }
        }
    }
    ```

## 3. API Payload Schemas

Not applicable for the Scarlet Engine MVP, as the engine itself does not expose external HTTP APIs. Game-specific APIs built on top of the engine would define their own payload schemas.

## 4. Database Schemas

Not applicable for the Scarlet Engine MVP, as no database is required.

## 5. Configuration File Data Structures

The `ConfigManager` will load configuration data from files (e.g., JSON). Below are example structures.

### 5.1. Window Configuration (`window_config.json`)

* **Purpose:** Defines initial window properties.
* **Format:** JSON
* **Example Schema:**
    ```json
    {
      "title": "Scarlet Engine Game",
      "width": 1280,
      "height": 720,
      "isMouseVisible": true,
      "isFullscreen": false,
      "allowUserResizing": true
    }
    ```
* **C# Representation (Example for loading):**
    ```csharp
    public class WindowConfig
    {
        public string Title { get; set; } = "Scarlet Engine";
        public int Width { get; set; } = 1280;
        public int Height { get; set; } = 720;
        public bool IsMouseVisible { get; set; } = true;
        public bool IsFullscreen { get; set; } = false;
        public bool AllowUserResizing { get; set; } = true;
    }
    ```

### 5.2. Input Mapping Configuration (`input_mappings.json`)

* **Purpose:** Defines mappings from physical inputs (keyboard, gamepad) to logical game actions.
* **Format:** JSON
* **Example Schema:**
    ```json
    {
      "DefaultGameplay": {
        "Quit": ["Escape"],
        "MoveUp": ["W", "Up"],
        "MoveDown": ["S", "Down"],
        "MoveLeft": ["A", "Left"],
        "MoveRight": ["D", "Right"],
        "Fire": ["Space", "GamepadA", "LeftMouseButton"],
        "Jump": ["Space", "GamepadA"]
      },
      "MainMenu": {
        "NavigateUp": ["Up", "GamepadDPadUp"],
        "NavigateDown": ["Down", "GamepadDPadDown"],
        "Select": ["Enter", "GamepadA"],
        "Back": ["Escape", "GamepadB"]
      }
    }
    ```
    *Key names for keyboard correspond to `Microsoft.Xna.Framework.Input.Keys` enum members. Gamepad button names are placeholders and would be mapped by `InputManager` (e.g., "GamepadA", "GamepadLeftStickUp").*
* **C# Representation (Example for loading):**
    ```csharp
    using System.Collections.Generic;

    // Represents a set of action mappings (e.g., "DefaultGameplay", "MainMenu")
    public class InputActionMap : Dictionary<string, List<string>>
    {
    }

    // Represents the overall input configuration file
    public class InputConfig : Dictionary<string, InputActionMap>
    {
    }
    ```

## 6. Change Log

| Change        | Date       | Version | Description                                      | Author      |
| ------------- | ---------- | ------- | ------------------------------------------------ | ----------- |
| Initial draft | 2025-05-15 | 0.1     | Initial draft of ECS components and config files.| 3-Architect |


================================================
File: docs/product-brief.md
================================================
# Project Brief: Scarlet Engine (for NightRunner)

## Introduction / Problem Statement

The core idea of this project is to convert the existing, well-structured "Peace Game Engine" (currently built with LÃ–VE2D and Lua for the game "NightRunner") into a new engine, dubbed "Scarlet Engine," using C# and the MonoGame framework.

This project is driven by the opportunity to:
- Leverage C#'s static typing system to improve AI-assisted coding accuracy and overall code robustness.
- Benefit from the larger C# codebase available within AI training data, potentially enhancing AI-driven development and suggestions.
- Utilize a more widely known programming language (C#), which can broaden the pool for potential collaboration and developer familiarity.
- Allow the primary developer to leverage and further develop their existing C# skills.
- Retain the proven architectural design and features of the original engine while transitioning to a new technology stack that offers different advantages in terms of performance, tooling, and library availability.

## Vision & Goals

- **Vision:** To create a versatile C# game engine, "Scarlet Engine," built on the MonoGame framework. This engine will serve as the foundation for the completed "NightRunner" game and be adaptable for developing various types of 2D games in the future.
- **Primary Goals (for MVP):**
  - Goal 1: Successfully port all core manager functionalities (Scene, Asset, Input, Config, Event, Render, Sound, UI, Camera, Log) from Lua/LÃ–VE2D to C#/MonoGame with equivalent features by [Target Date - e.g., end of Q4 2025].
  - Goal 2: Replicate the core ECS (Entity-Component-System) architecture, including entity creation, component management (Position, Sprite, Velocity, PlayerControlled, Collider), and system processing (Movement, Render, Collision) in C# by [Target Date - e.g., end of Q4 2025].
  - Goal 3: Achieve functional parity with "Milestone 4: Event Handling and Input Management" from the original engine's `TASK.MD`, allowing the `test_scene4.lua` shmup prototype to run with similar functionality using Scarlet Engine by [Target Date - e.g., end of Q4 2025].
- **Success Metrics (Initial Ideas):**
  - All original `test_scene.lua` through `test_scene4.lua` functionalities are replicated within the Scarlet Engine with no loss of features.
  - Subjective evaluation by the primary developer indicates the C# codebase is easier to debug and refactor due to static typing.
  - Observation of measurable improvement in AI-assisted coding (e.g., fewer incorrect suggestions, faster implementation of boilerplate) when working with the C# version compared to Lua.
  - Porting of all existing Busted tests to a C# testing framework, achieving a high pass rate (e.g., 90%+).

## Target Audience / Users

- **Primary User (Engine):** The primary developer of the Scarlet Engine.
- **Secondary Users (Engine - Future):** Potentially other collaborators or users if the engine is refactored for broader use or open-sourced after the completion and refactoring of "NightRunner" to ensure clear separation between game and engine logic.
- **Primary Users (NightRunner - Game):** (To be defined further in game-specific documentation; engine design should support a polished, cross-platform 2D game experience).

## Key Features / Scope (High-Level Ideas for MVP)

- Core Engine Orchestration (Main game loop, C# equivalents of LÃ–VE callbacks).
- Ported Managers:
    - AssetManager (interfacing with MonoGame Content Pipeline)
    - CameraManager
    - ConfigManager
    - EventManager
    - InputManager (Keyboard, Gamepad, including `gamecontrollerdb.txt` equivalent)
    - LogManager
    - RenderManager (implementing `shove.lua` equivalent logic for resolution, scaling, layers)
    - SceneManager
    - SoundManager
    - UIManager (basic capabilities for debug/test UIs)
- ECS Core:
    - Entity and Component (Position, Sprite, Velocity, PlayerControlled, Collider) management.
    - Systems: MovementSystem, RenderSystem, CollisionSystem.
- Scene Implementation:
    - Base Scene class structure.
    - Ported test scenes equivalent to `test_scene.lua` through `test_scene4.lua`.
- Rendering Capabilities:
    - Sprite, shape, and text rendering via RenderManager.
- Input Handling:
    - Mapping raw inputs to logical actions.
- Audio:
    - Basic sound effect playback.

## Known Technical Constraints or Preferences

- **Core Technology:** C# and MonoGame (specifically targeting MonoGame 3.8.2 or newer, utilizing .NET 9 / C# 13, with a future goal of .NET 10 if supported by MonoGame for LTS).
- **Development Environment:** Visual Studio Code with the C# Dev Kit.
- **ECS Library:** Initial preference for "Arch ECS" due to its perceived simplicity (Source 5.2, 5.3, 5.4).
- **Resolution/Layering Management (`shove.lua` equivalent):** Preference to find an existing C# library if a suitable one is available; otherwise, this functionality will need to be custom-built within the `RenderManager`.
- **Redistributables:** For framework-dependent deployments on .NET 9, end-users will require the .NET 9 Desktop Runtime. Self-contained deployments will avoid this prerequisite at the cost of larger application size.
- **Project Nature:** Personal project with flexible timelines and no immediate budget constraints.
- **MVP Platform Targets:** Windows, Linux, and macOS. The engine should be structured to optionally support Android/iOS builds in the future.

## Risks

- **Complexity of Porting/Replicating `shove.lua`:** The advanced resolution, scaling, and layering features of `shove.lua` may be challenging to replicate with exact parity in C#/MonoGame if a direct library equivalent is not found.
- **API and Paradigm Mismatches:** Translating LÃ–VE-specific API calls and Lua's dynamic, prototype-based nature to MonoGame APIs and C#'s static, class-based structure could present unforeseen difficulties.
- **Scope Creep ("Rewrite Temptation"):** The desire to significantly refactor or introduce new features beyond direct porting during the initial conversion could delay MVP completion.
- **Underestimation of Time:** Porting, even with a clear blueprint, can be time-consuming when changing languages and frameworks.
- **Learning Curve:** Adapting to specific nuances of MonoGame, .NET 9, Arch ECS, or any chosen C# libraries may require a dedicated learning period.
- **Dependency on External Libraries:** The stability, maintenance, performance, and feature set of any newly chosen C# libraries (e.g., for `shove.lua` equivalent, or even Arch ECS) could introduce external dependencies and potential risks.


================================================
File: docs/project-structure.md
================================================
# Scarlet Engine Project Structure

## Overview

The Scarlet Engine project is structured to promote modularity, reusability, and a clear separation between the core engine logic and game-specific implementations. The solution (`monogame-nightrunner.sln`) will consist of a single main project:

1. **`NightRunner` (Executable Application):** This project contains all code, including the "Scarlet Engine" logic (housed within `src/Engine/`) and the game-specific code for "NightRunner". The Scarlet Engine module also includes its own set of test scenes for validation and demonstration (`src/Engine/TestScenes/`). The `NightRunner` application will reference the MonoGame framework, manage all shared assets, and can initiate/run both its own game-specific scenes and the engine's test scenes.

This single-project setup, with the engine code organized into a dedicated `src/Engine/` directory and utilizing distinct namespaces, allows for a "soft wall" or logical separation. This maintains clarity and organization while simplifying the build process.

## Proposed Directory Structure Diagram

This diagram illustrates the proposed high-level structure within the `monogame-nightrunner` solution directory.

```mermaid
graph TD
    Solution["monogame-nightrunner/ (Solution Root)"] --> SlnFile["monogame-nightrunner.sln"];
    SlnFile --> NR_ProjDir["NightRunner/"];
    SlnFile --> DocsDir["docs/"];
    SlnFile --> ContentDir["Content/ (Shared Assets)"];

    NR_ProjDir --> NR_csproj["nightrunner.csproj (Executable, .NET 9, MonoGame)"];
    NR_csproj -- "Uses Assets From" --> ContentDir;

    NR_ProjDir --> NR_Program["Program.cs"];
    NR_ProjDir --> NR_Game1["Game1.cs (Main Game Class / Host for Engine Scenes)"];
    NR_ProjDir --> NR_src["src/"];

    NR_src --> SE_Dir["Engine/ (Scarlet Engine Code)"];
    NR_src --> NR_GameLogicSubDir["GameLogic/ (NightRunner Specific Code)"]; %% Game-specific logic can also live here

    SE_Dir --> SE_Core["Core/ (Engine Loop, Base Classes, e.g., ScarletGame.cs)"];
    SE_Dir --> SE_Managers["Managers/ (AssetManager, SceneManager, etc.)"];
    SE_Dir --> SE_ECS["ECS/ (Arch ECS integration, Components, Systems)"];
    SE_Dir --> SE_Graphics["Graphics/ (RenderManager, Camera, Viewport)"];
    SE_Dir --> SE_Input["Input/ (InputManager, Action Maps)"];
    SE_Dir --> SE_Audio["Audio/ (SoundManager)"];
    SE_Dir --> SE_UI["UI/ (UIManager - basic)"];
    SE_Dir --> SE_Utils["Utils/ (LogManager, ConfigManager, EventManager)"];
    SE_Dir --> SE_TestScenes["TestScenes/ (Engine Test Scenes, e.g., TestScene1-4)"];

    NR_GameLogicSubDir --> NR_GameScenes["GameScenes/ (e.g., TitleScene, Level1)"];
    NR_GameLogicSubDir --> NR_GameComponents["GameComponents/ (NightRunner specific Components)"];
    NR_GameLogicSubDir --> NR_GameSystems["GameSystems/ (NightRunner specific Systems)"];

    %% Logical dependency: Game code uses Engine code
    NR_Game1 -.-> SE_Dir; %% Game host uses the engine
    NR_Game1 -.-> SE_TestScenes; %% Game host can run engine's test scenes
    NR_GameLogicSubDir -.-> SE_Dir; %% Game logic uses engine modules

    DocsDir --> PRD["PRD.md"];
    DocsDir --> ThisDoc["project-structure.md"];
    DocsDir --> TechStack["tech-stack.md"];
    %% Add other docs like coding-standards.md, etc.

    ContentDir --> MGCB["Content.mgcb"];
    ContentDir --> AssetsImage["Images/"];
    ContentDir --> AssetsAudio["Audio/"];
    ContentDir --> AssetsFonts["Fonts/"];
```


================================================
File: docs/tech-stack.md
================================================
# Scarlet Engine Technology Stack

## Technology Choices

| Category                  | Technology                                  | Version / Details                                    | Description / Purpose                                                                 | Justification (Optional)                                                                                                |
| :------------------------ | :------------------------------------------ | :--------------------------------------------------- | :------------------------------------------------------------------------------------ | :---------------------------------------------------------------------------------------------------------------------- |
| **Languages** | C#                                          | 13                                                   | Primary programming language for the engine.                                        | Leverage static typing, modern language features, and .NET ecosystem. Improved AI-assisted coding. (PRD, Product Brief) |
| **Runtime** | .NET                                        | 9                                                    | Core runtime environment for C#.                                                      | Access to latest .NET features, performance improvements, and long-term support.                                      |
| **Frameworks** | MonoGame                                    | 3.8.2+                                               | Cross-platform game development framework providing graphics, input, audio, etc.    | Core framework for 2D game development, porting from LÃ–VE (Peace Engine). (Initial Architect Prompt)                  |
| **Key Libraries** | Arch ECS                                    | >=2.0.0 (Latest stable compatible with .NET 9)       | Entity Component System library.                                                      | Preferred for simplicity and performance. (Initial Architect Prompt)                                                    |
|                           | MonoGame.Extended                           | >=4.1.0 (Latest stable compatible with .NET 9)       | Provides extended functionalities like ViewportAdapters and Camera for MonoGame.    | Preferred for `shove.lua` equivalent functionality. (Initial Architect Prompt)                                        |
|                           | xUnit                                       | Latest stable (e.g., Core: ~2.9.x, VS Runner: ~3.1.x) | Unit testing framework.                                                               | Modern, flexible, and integrates well with `dotnet test`. (User Confirmed)                                            |
| **Tools** | MonoGame Content Pipeline (MGCB)            | Bundled with MonoGame 3.8.2+                         | Tool for processing game assets (textures, fonts, audio).                             | Standard MonoGame asset processing. (Initial Architect Prompt)                                                          |
| **Development IDE** | Visual Studio Code with C# Dev Kit          | Latest                                               | Preferred Integrated Development Environment.                                         | Developer preference. (Initial Architect Prompt)                                                                        |
| **Target Platforms** | Windows, Linux, macOS                       | N/A                                                  | Operating systems the engine will run on for the MVP.                               | Cross-platform compatibility from the outset. (Initial Architect Prompt)                                              |
| **Version Control** | Git                                         | Latest                                               | Source code management.                                                               | Standard practice. (Implied from `digest.txt` .github folder)                                                            |
| **Configuration Files** | JSON or XML                                 | N/A                                                  | For `ConfigManager` to load engine/game settings.                                     | File-based configuration. (Initial Architect Prompt)                                                                  |

## Notes

* **Version Specificity:** For libraries like Arch ECS, MonoGame.Extended, and xUnit, the exact version will be the latest stable release confirmed to be compatible with .NET 9 and MonoGame 3.8.2+ at the time of dependency installation. The versions listed are based on information available as of May 2025.
* **MonoGame Version:** The project currently references `MonoGame.Framework.DesktopGL` version `3.8.*` in `nightrunner.csproj` (Source 1600). We will ensure this is updated to a specific `3.8.2` or newer patch version that is stable with .NET 9. The MonoGame 3.8.2 release officially supports .NET 8 (Source 2.3, 2.7), and usage with .NET 9 is generally expected to work for .NET Standard compatible libraries.
* **Database Requirements:** Not applicable for the engine MVP. Configuration data will be managed via files or C# code. (Initial Architect Prompt)
* **Hosting/Cloud Provider:** Not applicable for the engine MVP. (Initial Architect Prompt)

## Change Log

| Change        | Date       | Version | Description                                      | Author       |
| ------------- | ---------- | ------- | ------------------------------------------------ | ------------ |
| Initial draft | 2025-05-15 | 0.1     | Initial draft based on interactive decisions.    | 3-Architect  |


================================================
File: docs/testing-strategy.md
================================================
# Scarlet Engine Testing Strategy

## 1. Overall Philosophy & Goals

The primary goal of testing for the Scarlet Engine MVP is to **verify functional parity** with the specified test scenes from the original Peace Game Engine (up to `test_scene4.lua`). This ensures the core engine port is successful and behaves as expected.

Secondary goals include:
* Ensuring critical engine components are robust and function correctly in isolation.
* Enabling confident refactoring and future development by having a foundational test suite.
* Integrating tests into the development workflow to catch regressions early.

The strategy emphasizes pragmatic testing focused on achieving MVP requirements.

## 2. Testing Levels (MVP Focus)

### 2.1. Functional Parity / Acceptance Testing (Primary for MVP)

* **Scope:** This is the **primary validation method** for the MVP. It involves successfully porting, executing, and visually/functionally verifying the C# versions of the test scenes (`test_scene.lua` through `test_scene4.lua`) against their original Lua counterparts or documented behavior.
* **Methodology:**
    * Each test scene from the Peace Game Engine (`test_scene.lua`, `test_scene2.lua`, `test_scene3.lua`, `test_scene4.lua`) will be ported to C# within the `NightRunner/TestScenes/` directory, using the Scarlet Engine.
    * These scenes will be run as part of the `NightRunner` application.
    * Verification will involve:
        * Visual comparison to ensure rendering is consistent with the original (or intended design).
        * Interaction testing to ensure input handling, entity behaviors (movement, shooting, collision), and scene flow match the original prototype's functionality.
        * Confirmation that all core gameplay features of `test_scene4.lua` (shmup prototype) are present and working.
* **Tools:** Visual inspection, manual interaction, and debugging tools within VS Code.
* **Location:** Implemented as runnable scenes within `NightRunner.csproj` under `src/NightRunner/TestScenes/`.
* **Success Criteria:** Each ported test scene runs without critical errors and exhibits the same core functionalities and behaviors as documented for the original Peace Engine Milestone 4.

### 2.2. Unit Tests (Secondary for MVP)

* **Scope:** Focused on critical, complex, or reusable low-level engine components within the `Scarlet` library. This helps ensure the foundational pieces of the engine are correct and stable.
    * Examples:
        * Specific algorithms within Managers (e.g., `ConfigManager` parsing, complex `AssetManager` caching logic if any, `InputManager` action mapping).
        * Core ECS functionalities (if a custom ECS were built, this would be more critical; with Arch ECS, this might focus on utility wrappers or complex custom systems).
        * Resolution/layering management logic if custom-built (e.g., specific calculations in `RenderManager`).
        * Core data structures or utility functions.
* **Tools:**
    * **Framework:** xUnit (as decided).
    * **Runner:** `dotnet test` command-line utility, integrated with VS Code.
* **Mocking/Stubbing:** Standard C# mocking techniques or libraries (e.g., Moq, NSubstitute, or manual stubs/fakes) can be used if necessary to isolate components, particularly for testing managers without requiring a full game loop or graphics device. However, given MonoGame's nature, some tests might be closer to integration tests if they require `Microsoft.Xna.Framework` types that need a `GraphicsDevice` context (Source 2.3, 7.1 from previous search). We will prioritize testable design for managers.
* **Location:** A separate test project, e.g., `ScarletEngine.Tests.csproj`, referencing `ScarletEngine.csproj`. Tests will be organized in a structure mirroring the `ScarletEngine` project.
* **Expectations:**
    * Tests should be self-contained and repeatable.
    * Focus on verifying specific functional units.
    * Comprehensive unit test coverage is **secondary** to achieving functional parity of the test scenes for the MVP. Effort will be prioritized towards test scenes first.

### 2.3. Integration Tests (Limited for MVP)

* **Scope:** While not a primary focus for the MVP, simple integration tests might be considered for verifying interactions between key engine modules if these are not adequately covered by the test scenes or unit tests. For example, ensuring the `EventManager` correctly dispatches events that are subscribed to by different managers.
* **Tools:** xUnit, potentially within the same `ScarletEngine.Tests.csproj`.
* **Expectations:** Used sparingly for MVP, only where high value and not covered by other testing types.

## 3. Test Data Management

* **Functional Parity Tests:** Test data is inherent in the design of each test scene (e.g., entity starting positions, asset names, input sequences to test).
* **Unit Tests:** Test data will be created as part of individual test setups (e.g., sample configuration snippets for `ConfigManager` tests, predefined input states for `InputManager` tests).
* **Assets:** Test assets (sprites, sounds, fonts) required by the test scenes will be managed via the `Content/Content.mgcb` project and loaded via the `AssetManager`.

## 4. CI/CD Integration

* **Build Process:** All tests (unit tests via `dotnet test`) should be executable as part of the standard build process.
* **Automation:** While a full CI/CD pipeline is not an explicit MVP requirement for this local desktop application engine, ensuring tests can be run from the command line (`dotnet test`) facilitates future automation.
* **Test Failure:** A failing unit test should be considered a build failure.

## 5. Local Development & Testing Requirements

* **Developer Workflow:** The primary developer must be able to easily:
    * Build and run the `NightRunner` application to execute and validate the test scenes.
    * Run all unit tests via VS Code's test explorer or `dotnet test`.
    * Debug both the test scenes and unit tests.
* **Content Pipeline:** The MonoGame Content Pipeline (`MGCB Editor` and/or `mgcb` tool) will be used for processing game assets needed for test scenes. The project structure supports this.

## 6. Post-MVP Considerations

* Increased unit test coverage for more engine modules.
* More comprehensive integration tests.
* Potentially, automated visual regression tests for rendering if significant rendering features are added.
* Performance testing, especially if targeting more demanding game types.

## Change Log

| Change        | Date       | Version | Description                                           | Author      |
|---------------|------------|---------|-------------------------------------------------------|-------------|
| Initial draft | 2025-05-15 | 0.1     | Initial draft based on project requirements and MVP scope. | 3-Architect |


================================================
File: docs/epics/epic1.md
================================================
# Epic 1: Core Engine Foundation & Setup

**Goal:** Establish the basic C#/MonoGame project structure, core game loop, windowing, and essential utility managers (Log, Config) to create a runnable, minimal engine instance. This epic ensures a foundational layer for all subsequent development.

## Story List

### Story 1.1: Initialize C# MonoGame Project

- **User Story / Goal:** As the Primary Developer, I want a new C#/MonoGame project initialized with .NET 9, so that I have the correct foundational structure for the Scarlet Engine.
- **Detailed Requirements:**
  - Create a new MonoGame project targeting .NET 9 (e.g., "MonoGame Cross-Platform Desktop Application").
  - Ensure the project targets MonoGame version 3.8.2 or newer.
  - Configure the project for Windows, Linux, and macOS.
  - Set up the solution (`.sln`) and project (`.csproj`) files.
  - The project should compile and run, displaying a default MonoGame window (e.g., cornflower blue screen).
  - Establish basic folder structure for engine code (e.g., `ScarletEngine/Core`, `ScarletEngine/Managers`, `ScarletEngine/ECS`).
- **Acceptance Criteria (ACs):**
  - [x] AC1: A new MonoGame solution and project are created using C# and .NET 9.
  - [x] AC2: The project references MonoGame.Framework.DesktopGL version 3.8.2 or newer.
  - [x] AC3: The project can be built and run successfully on Windows, displaying the default MonoGame window. (Linux/macOS build/run verification can be deferred if setup is complex, but configuration should be present).
  - [x] AC4: Initial directory structure (`Core`, `Managers`, `ECS`) is created within the project.
  - [x] AC5: `Program.cs` and a main `Game` class (e.g., `ScarletGame.cs`) exist and handle basic MonoGame initialization.

### Story 1.2: Implement Basic Game Loop and Window Configuration

- **User Story / Goal:** As the Primary Developer, I want a basic game loop and window configuration implemented, so that I can control the engine's update/draw cycle and initial window properties.
- **Detailed Requirements:**
  - Implement the core MonoGame `Initialize`, `LoadContent`, `Update`, and `Draw` methods in the main `Game` class.
  - Allow configuration of window title, width, and height (e.g., from constants or a simple config mechanism).
  - Implement basic quit functionality (e.g., exiting on 'Escape' key press).
- **Acceptance Criteria (ACs):**
  - [x] AC1: The main `Game` class has stubs for `Initialize`, `LoadContent`, `Update`, and `Draw`.
  - [x] AC2: Window title, width (e.g., 800), and height (e.g., 600) can be set and are reflected when the game runs.
  - [x] AC3: Pressing the 'Escape' key closes the game window.
  - [x] AC4: The `Update` and `Draw` methods are called repeatedly as part of the game loop.

### Story 1.3: Implement LogManager

- **User Story / Goal:** As the Primary Developer, I want a basic `LogManager` implemented, so that I can output engine messages for debugging and information.
- **Detailed Requirements:**
  - Create a `LogManager` class.
  - Provide static methods for different log levels (e.g., `Info`, `Warning`, `Error`, `Debug`).
  - Log messages should output to the console by default.
  - Include timestamp and log level in messages.
  - The `LogManager` should be accessible globally or easily injectable.
- **Acceptance Criteria (ACs):**
  - [x] AC1: `LogManager.Info("Test message")` (and other levels) prints a formatted message including timestamp, level, and "Test message" to the console.
  - [x] AC2: The `LogManager` can be called from the main `Game` class (e.g., in `Initialize`).

### Story 1.4: Implement ConfigManager

- **User Story / Goal:** As the Primary Developer, I want a basic `ConfigManager` to load and provide access to simple configuration settings, so that engine parameters can be managed externally.
- **Detailed Requirements:**
  - Create a `ConfigManager` class.
  - Implement functionality to load basic settings (e.g., from a simple JSON or XML file, or hardcoded C# objects for MVP's first pass).
  - Provide methods to retrieve configuration values by key.
  - Initial settings could include window dimensions, title (refactoring from Story 1.2).
- **Acceptance Criteria (ACs):**
  - [x] AC1: `ConfigManager` can load predefined settings (e.g., window width, height, title).
  - [x] AC2: The main `Game` class uses `ConfigManager` to set window properties.
  - [ ] AC3: An error is logged if a configuration file is expected but not found (if file-based).
  - [x] AC4: Default values are used or an error is logged if a specific config key is not found.



================================================
File: docs/epics/epic2.md
================================================
# Epic 2: Asset and Scene Management Implementation

**Goal:** Implement core `AssetManager` for loading content via MonoGame's pipeline and `SceneManager` for handling different game states/scenes. Port an initial simple test scene to demonstrate these managers.

## Story List

### Story 2.1: Implement AssetManager for Texture Loading

- **User Story / Goal:** As the Primary Developer, I want an `AssetManager` that can load and manage textures using the MonoGame Content Pipeline, so that scenes and entities can render sprites.
- **Detailed Requirements:**
    - Create an `AssetManager` class.
    - It should take MonoGame's `ContentManager` as a dependency (e.g., via constructor).
    - Implement a method to load a `Texture2D` (e.g., `LoadTexture(string assetName)`).
    - Implement basic caching: if a texture is requested again, return the already loaded instance.
    - Add a test texture (e.g., a simple PNG image) to the MonoGame Content Project (`.mgcb`).
- **Acceptance Criteria (ACs):**
    - [ ] AC1: `AssetManager` can successfully load a `Texture2D` specified in the Content Project.
    - [ ] AC2: Requesting the same texture multiple times returns the same `Texture2D` object (caching works).
    - [ ] AC3: An appropriate exception is thrown or error logged if a texture asset is not found.
    - [ ] AC4: The `AssetManager` is initialized in the main `Game` class (`LoadContent`) and is accessible.

### Story 2.2: Implement Basic SceneManager

- **User Story / Goal:** As the Primary Developer, I want a `SceneManager` to manage different game scenes (states), so that the engine can transition between different parts of a game (e.g., menu, gameplay).
- **Detailed Requirements:**
    - Create an `IScene` interface with methods like `LoadContent(AssetManager assetManager, GraphicsDevice graphicsDevice)`, `UnloadContent()`, `Update(GameTime gameTime)`, `Draw(SpriteBatch spriteBatch)`.
    - Create a `SceneManager` class.
    - Implement methods to set the current scene (e.g., `SwitchScene(IScene newScene)`).
    - The `SceneManager` should call `LoadContent` on the new scene when it becomes active.
    - The main `Game` class's `Update` and `Draw` methods should delegate to the `SceneManager`'s current scene.
- **Acceptance Criteria (ACs):**
    - [ ] AC1: `SceneManager` can hold a reference to an active `IScene`.
    - [ ] AC2: Calling `SwitchScene` changes the active scene and calls its `LoadContent` method.
    - [ ] AC3: The main `Game` class's `Update` method calls the active scene's `Update` method via `SceneManager`.
    - [ ] AC4: The main `Game` class's `Draw` method calls the active scene's `Draw` method via `SceneManager`.

### Story 2.3: Create Base Scene and Port `test_scene.lua` (Simple Sprite Display)

- **User Story / Goal:** As the Primary Developer, I want to create a base `Scene` class and port the simplest test scene (`test_scene.lua`, assuming it just displays a sprite) to C#, so that I can verify `AssetManager` and `SceneManager` functionality.
- **Detailed Requirements:**
    - Create a `BaseScene` class implementing `IScene` (can be abstract or a concrete base).
    - Create a `TestScene1` class inheriting from `BaseScene`.
    - In `TestScene1.LoadContent`, use `AssetManager` to load the test texture.
    - In `TestScene1.Draw`, use `SpriteBatch` to draw the loaded texture at a fixed position.
    - In the main `Game` class (`LoadContent`), instantiate `TestScene1` and set it as the initial scene in `SceneManager`.
- **Acceptance Criteria (ACs):**
    - [ ] AC1: `TestScene1` is created and set as the current scene.
    - [ ] AC2: The test texture is loaded by `AssetManager` within `TestScene1`.
    - [ ] AC3: The test texture is drawn on the screen at a fixed position when the game runs.
    - [ ] AC4: The background is cleared to a specific color before drawing the scene.


================================================
File: docs/epics/epic3.md
================================================
# Epic 3: Input Management Implementation

**Goal:** Implement `InputManager` for handling keyboard, mouse (if applicable for tests), and gamepad inputs, including mapping raw inputs to logical game actions, and support for `gamecontrollerdb.txt` equivalent.

## Story List

### Story 3.1: Basic Keyboard Input Handling

- **User Story / Goal:** As the Primary Developer, I want the `InputManager` to detect and report current and previous keyboard states, so that game logic can respond to key presses, releases, and holds.
- **Detailed Requirements:**
    - Create an `InputManager` class.
    - It should capture `KeyboardState` from MonoGame in its `Update` method (called from the main game `Update`).
    - Implement methods like `IsKeyDown(Keys key)`, `IsKeyPressed(Keys key)` (pressed this frame), `IsKeyReleased(Keys key)` (released this frame).
    - The `InputManager` should be updated each frame before scene updates.
- **Acceptance Criteria (ACs):**
    - AC1: `InputManager.IsKeyDown(Keys.A)` returns true if 'A' is held down, false otherwise.
    - AC2: `InputManager.IsKeyPressed(Keys.A)` returns true only on the frame 'A' is first pressed.
    - AC3: `InputManager.IsKeyReleased(Keys.A)` returns true only on the frame 'A' is released.
    - AC4: The `InputManager` is updated in the main game loop.

### Story 3.2: Input Action Mapping

- **User Story / Goal:** As the Primary Developer, I want the `InputManager` to map physical keys to logical game actions, so that game logic can be independent of specific key bindings.
- **Detailed Requirements:**
    - Define a way to configure action mappings (e.g., a dictionary `string actionName -> Keys[] associatedKeys`). This can be hardcoded initially or loaded via `ConfigManager`.
    - Implement methods like `IsActionDown(string actionName)`, `IsActionPressed(string actionName)`, `IsActionReleased(string actionName)`.
    - Example: "Jump" action mapped to `Keys.Space`.
    - Modify the 'Escape to Quit' functionality to use an action (e.g., "Quit").
- **Acceptance Criteria (ACs):**
    - AC1: An action "Quit" can be mapped to `Keys.Escape` via `ConfigManager` or internal setup.
    - AC2: `InputManager.IsActionPressed("Quit")` returns true when Escape is pressed.
    - AC3: The game quits when the "Quit" action is triggered.
    - AC4: Multiple keys can be mapped to the same action.

### Story 3.3: Basic Gamepad Input Handling & `gamecontrollerdb.txt` Support

- **User Story / Goal:** As the Primary Developer, I want the `InputManager` to handle basic gamepad button/axis input and support `gamecontrollerdb.txt` style mappings, so that games can be played with common gamepads.
- **Detailed Requirements:**
    - Extend `InputManager` to capture `GamePadState` for at least one player.
    - Implement methods to check button states (e.g., `IsButtonDown(Buttons button, PlayerIndex playerIndex)`).
    - Integrate a mechanism to load gamepad mappings similar to SDL's `gamecontrollerdb.txt`. MonoGame has `GamePad.SetGamepadMappings()`. A simple text file with mappings should be loadable.
    - Extend action mapping to include gamepad buttons.
- **Acceptance Criteria (ACs):**
    - AC1: `InputManager` can detect connected gamepads.
    - AC2: `InputManager.IsButtonDown(Buttons.A, PlayerIndex.One)` returns true if Gamepad 1's 'A' button (or equivalent based on mapping) is held.
    - AC3: Action mapping works for gamepad buttons (e.g., "Fire" action mapped to `Buttons.X`).
    - AC4: The engine can load a `gamecontrollerdb.txt`-like file to apply controller mappings at startup.

### Story 3.4: Mouse Input Handling (Basic)

- **User Story / Goal:** As the Primary Developer, I want the `InputManager` to report mouse position and button states, so that UI or gameplay can react to mouse input if needed by test scenes.
- **Detailed Requirements:**
    - Extend `InputManager` to capture `MouseState`.
    - Implement methods for mouse position (e.g., `GetMousePosition() -> Point`), and button states (e.g., `IsLeftMouseButtonPressed()`).
- **Acceptance Criteria (ACs):**
    - AC1: `InputManager.GetMousePosition()` returns the current mouse cursor coordinates within the game window.
    - AC2: `InputManager.IsLeftMouseButtonPressed()` returns true only on the frame the left mouse button is first pressed.
    - AC3: The main `Game` class property `IsMouseVisible` can be controlled (e.g., set to true).


================================================
File: docs/epics/epic4.md
================================================
# Epic 4: Basic ECS Implementation

**Goal:** Integrate or implement the chosen ECS framework (Arch ECS), define core components (Position, Sprite), and a basic `RenderSystem` to draw entities. Port a test scene demonstrating ECS rendering.

## Story List

### Story 4.1: Integrate Arch ECS (or chosen ECS library)

- **User Story / Goal:** As the Primary Developer, I want to integrate the Arch ECS library into the project, so that I can use its functionalities for entity, component, and system management.
- **Detailed Requirements:**
    - Add the Arch ECS (or chosen alternative) NuGet package to the project.
    - Create a basic wrapper or helper class for ECS world creation and management if needed, to align with engine patterns.
    - Ensure the ECS library can be initialized and a world instance can be created.
- **Acceptance Criteria (ACs):**
    - AC1: The Arch ECS library is added as a project dependency.
    - AC2: An ECS `World` object can be instantiated successfully.
    - AC3: Basic Arch ECS operations (entity creation, adding a dummy component) can be performed without errors in a test setup.

### Story 4.2: Define Core Components (Position, Sprite)

- **User Story / Goal:** As the Primary Developer, I want to define `PositionComponent` and `SpriteComponent` C# structures/classes, so that entities can have spatial location and visual representation.
- **Detailed Requirements:**
    - Create `PositionComponent` (e.g., struct or class) with `X` and `Y` fields (float or double).
    - Create `SpriteComponent` (e.g., struct or class) with a field for `TextureName` (string, for `AssetManager` lookup) and potentially tint, scale, origin, layer depth.
- **Acceptance Criteria (ACs):**
    - AC1: `PositionComponent` is defined with public `X` and `Y` properties/fields.
    - AC2: `SpriteComponent` is defined with a public `TextureName` property/field and optionally others like `ColorTint`.
    - AC3: These components can be added to Arch ECS entities.

### Story 4.3: Implement Basic RenderSystem for ECS

- **User Story / Goal:** As the Primary Developer, I want a basic `RenderSystem` that iterates over entities with `PositionComponent` and `SpriteComponent` and draws them, so that ECS entities are visible.
- **Detailed Requirements:**
    - Create a `RenderSystem` class (e.g., inheriting from an Arch ECS system base if applicable, or as a standalone processor).
    - The system should query the ECS world for all entities possessing both `PositionComponent` and `SpriteComponent`.
    - In its `Draw` method (called by the current scene), it should:
        - Iterate through these entities.
        - Use `AssetManager` to get the `Texture2D` from `SpriteComponent.TextureName`.
        - Use `SpriteBatch` to draw the texture at `PositionComponent.X, PositionComponent.Y`, applying `SpriteComponent.ColorTint` if present.
- **Acceptance Criteria (ACs):**
    - AC1: `RenderSystem` correctly queries entities with `PositionComponent` and `SpriteComponent`.
    - AC2: For each such entity, its sprite is drawn at its position using the texture specified in `SpriteComponent`.
    - AC3: The `RenderSystem` uses the `AssetManager` to resolve texture names to `Texture2D` objects.
    - AC4: The `RenderSystem` is invoked by the active scene's `Draw` method.

### Story 4.4: Port `test_scene2.lua` (ECS Sprite Display)

- **User Story / Goal:** As the Primary Developer, I want to port `test_scene2.lua` (assuming it's the first scene that uses ECS to display a sprite) to C#, so that I can verify basic ECS, component, and `RenderSystem` functionality.
- **Detailed Requirements:**
    - Create a `TestScene2` class.
    - In `TestScene2.LoadContent`:
        - Initialize its own Arch ECS `World`.
        - Register the `RenderSystem` with the world.
        - Create an entity.
        - Add `PositionComponent` (e.g., X=100, Y=150) and `SpriteComponent` (using the test texture name) to the entity.
    - `TestScene2.Update` should call the ECS world's update method (if Arch requires it).
    - `TestScene2.Draw` should call the `RenderSystem`'s draw method (or the ECS world's draw that triggers systems).
    - Update the main game to load `TestScene2` as the initial scene.
- **Acceptance Criteria (ACs):**
    - AC1: `TestScene2` initializes an ECS world and creates an entity with `PositionComponent` and `SpriteComponent`.
    - AC2: The `RenderSystem` draws the entity's sprite at the specified position.
    - AC3: The game runs `TestScene2` and displays the ECS-rendered sprite.


================================================
File: docs/epics/epic5.md
================================================
# Epic 5: Advanced Rendering (`shove.lua` features) & Camera

**Goal:** Implement `RenderManager` with `shove.lua` equivalent features (viewport, resolution scaling, layer management) and a `CameraManager` to control the game's viewpoint.

## Story List

### Story 5.1: Implement RenderManager Core (`shove.lua` Viewport/Scaling)

- **User Story / Goal:** As the Primary Developer, I want a `RenderManager` that implements `shove.lua`-equivalent viewport definition, resolution scaling (e.g., "letterboxing" or "stretching" to fit a virtual resolution), so that game graphics are consistently displayed across different window sizes.
- **Detailed Requirements:**
    - Create `RenderManager` class.
    - Allow definition of a virtual resolution (e.g., 1920x1080).
    - Implement logic to calculate viewport and transformation matrices to scale the virtual resolution to the actual window size, maintaining aspect ratio (letterbox/pillarbox) or stretching. This will involve `GraphicsDevice.Viewport` and `SpriteBatch.Begin` with a transformation matrix.
    - Provide methods like `BeginDraw()` and `EndDraw()` that set up and tear down the scaled rendering.
    - The `RenderSystem` (and other direct drawing) should use `RenderManager`'s coordinate space.
    - Explore C# libraries for this (e.g., `MonoGame.Extended.ViewportAdapters`) or implement custom logic.
- **Acceptance Criteria (ACs):**
    - AC1: `RenderManager` can be configured with a virtual resolution.
    - AC2: When the game window is resized, content drawn within the `RenderManager`'s context scales correctly (e.g., letterboxed) to fit the virtual resolution within the new window size.
    - AC3: Coordinates used for drawing (e.g., in `RenderSystem`) are relative to the virtual resolution.
    - AC4: `TestScene2`'s rendering is now managed by `RenderManager`'s scaling.

### Story 5.2: Implement RenderManager Layering (`shove.lua` Layers)

- **User Story / Goal:** As the Primary Developer, I want the `RenderManager` to support rendering layers equivalent to `shove.lua`'s layer functionality, so that game elements can be drawn in a controlled order (e.g., UI on top of gameplay).
- **Detailed Requirements:**
    - Extend `RenderManager` to support named or indexed layers.
    - Drawing calls can specify a layer.
    - `RenderManager` ensures layers are drawn in a defined order during `EndDraw()` or a separate `PresentLayers()` call. This might involve multiple `SpriteBatch.Begin/End` calls sorted by layer, or using `SpriteSortMode.BackToFront` / `Deferred` with layer depth in `SpriteBatch.Draw()`.
- **Acceptance Criteria (ACs):**
    - AC1: Entities or draw calls can be assigned to different layers (e.g., "background", "entities", "foreground", "UI").
    - AC2: Elements in a "UI" layer are always drawn on top of elements in an "entities" layer.
    - AC3: `SpriteComponent` can optionally include a layer depth or layer ID. `RenderSystem` uses this.

### Story 5.3: Implement CameraManager (Basic 2D Camera)

- **User Story / Goal:** As the Primary Developer, I want a `CameraManager` to manage a 2D camera (position, zoom, rotation), so that the game view can be panned, zoomed, and rotated.
- **Detailed Requirements:**
    - Create `CameraManager` class (or a `Camera2D` class).
    - It should store camera properties: `Position` (Vector2), `Zoom` (float), `Rotation` (float).
    - Provide a method to get the camera's transformation matrix (`GetViewMatrix()`).
    - The `RenderManager` should apply the `CameraManager`'s view matrix when beginning its draw phase.
- **Acceptance Criteria (ACs):**
    - AC1: `CameraManager` can set and get position, zoom, and rotation.
    - AC2: `CameraManager` provides a valid transformation matrix based on its properties.
    - AC3: `RenderManager` applies this camera transformation, so changing camera position/zoom affects what's rendered and how.
    - AC4: `TestScene2` rendering is now affected by a default camera managed by `CameraManager`. Changing camera position in code moves the rendered sprite.


================================================
File: docs/epics/epic6.md
================================================
# Epic 6: Event Management & Sound Implementation

**Goal:** Implement `EventManager` for decoupled communication between engine components and `SoundManager` for loading and playing audio.

## Story List

### Story 6.1: Implement EventManager

- **User Story / Goal:** As the Primary Developer, I want an `EventManager` to allow different parts of the engine to publish and subscribe to events without direct dependencies, so that modules can communicate flexibly.
- **Detailed Requirements:**
    - Create an `EventManager` class.
    - Define a way to represent event types (e.g., enums, strings, or dedicated event classes).
    - Implement methods: `Subscribe(eventType, handlerAction)`, `Unsubscribe(eventType, handlerAction)`, `Publish(eventType, eventArgs)`.
    - Handlers should be delegates or actions (e.g., `Action<EventArgs>`).
    - The `EventManager` should be globally accessible or easily injectable.
- **Acceptance Criteria (ACs):**
    - AC1: A module can subscribe to a specific event type with a handler method.
    - AC2: When `EventManager.Publish` is called for that event type, the subscribed handler method is invoked with event arguments.
    - AC3: A module can unsubscribe from an event.
    - AC4: A simple test case (e.g., `InputManager` publishing a "QuitActionTriggered" event, and main game class subscribing to it to call `Exit()`) demonstrates its usage.

### Story 6.2: Implement SoundManager for Sound Effects

- **User Story / Goal:** As the Primary Developer, I want a `SoundManager` that can load and play sound effects, so that game events can have audio feedback.
- **Detailed Requirements:**
    - Create `SoundManager` class.
    - It should use `AssetManager` to load `SoundEffect` instances from the Content Pipeline.
    - Implement methods like `PlaySound(string soundName, float volume = 1.0f, float pitch = 0.0f, float pan = 0.0f)`.
    - Add a test sound effect (e.g., a WAV file) to the Content Project.
    - `AssetManager` needs to be extended to support loading `SoundEffect`.
- **Acceptance Criteria (ACs):**
    - AC1: `AssetManager` can load `SoundEffect` assets.
    - AC2: `SoundManager` can play a loaded sound effect by name.
    - AC3: Volume, pitch, and pan can be controlled when playing a sound.
    - AC4: In a test scene, a sound is played when a key is pressed (using `InputManager` and `SoundManager`).

### Story 6.3: Implement SoundManager for Music

- **User Story / Goal:** As the Primary Developer, I want the `SoundManager` to also handle loading and playback of music tracks, so that scenes can have background music.
- **Detailed Requirements:**
    - Extend `SoundManager` to load and manage `Song` instances (MonoGame's class for music). This might involve `AssetManager` or direct `ContentManager` use within `SoundManager` for songs if they are handled differently (e.g. streaming).
    - Implement methods like `PlayMusic(string songName, bool looping = true)`, `StopMusic()`, `PauseMusic()`, `ResumeMusic()`, `SetMusicVolume(float volume)`.
    - Add a test music file (e.g., OGG, MP3) to the Content Project.
    - `AssetManager` (or `SoundManager` directly) needs to support loading `Song` assets.
- **Acceptance Criteria (ACs):**
    - AC1: `AssetManager` (or `SoundManager`) can load `Song` assets.
    - AC2: `SoundManager.PlayMusic("test_music")` plays the specified music track.
    - AC3: Music can be looped, stopped, paused, resumed, and its volume controlled.
    - AC4: In a test scene, background music starts playing when the scene loads.


================================================
File: docs/epics/epic7.md
================================================
# Epic 7: Core Gameplay Systems & Components

**Goal:** Implement remaining core ECS components (`Velocity`, `PlayerControlled`, `Collider`) and systems (`MovementSystem`, `CollisionSystem`) needed for `test_scene4.lua`.

## Story List

### Story 7.1: Define and Integrate VelocityComponent

- **User Story / Goal:** As the Primary Developer, I want to define and integrate a `VelocityComponent` into the ECS, so that entities can have movement speed and direction.
- **Detailed Requirements:**
    - Create `VelocityComponent` (struct or class) with `X` and `Y` fields (float or double) representing change in position per second.
- **Acceptance Criteria (ACs):**
    - AC1: `VelocityComponent` is defined with public `X` and `Y` properties/fields.
    - AC2: `VelocityComponent` can be added to Arch ECS entities.

### Story 7.2: Implement MovementSystem

- **User Story / Goal:** As the Primary Developer, I want a `MovementSystem` that updates entity positions based on their `VelocityComponent`, so that entities can move automatically.
- **Detailed Requirements:**
    - Create `MovementSystem` class.
    - It should query entities with `PositionComponent` and `VelocityComponent`.
    - In its `Update` method (called by the ECS world or scene), it should update `PositionComponent.X` by `VelocityComponent.X * deltaTime` and `PositionComponent.Y` by `VelocityComponent.Y * deltaTime`.
- **Acceptance Criteria (ACs):**
    - AC1: `MovementSystem` updates the `PositionComponent` of entities based on their `VelocityComponent` and game `deltaTime`.
    - AC2: In a test scene, an entity with a `PositionComponent` and a non-zero `VelocityComponent` moves across the screen.
    - AC3: Movement is frame-rate independent.

### Story 7.3: Define PlayerControlledComponent and Integrate with InputSystem/Movement

- **User Story / Goal:** As the Primary Developer, I want a `PlayerControlledComponent` and an updated input/movement logic, so that an entity's velocity can be controlled by player input actions.
- **Detailed Requirements:**
    - Create `PlayerControlledComponent` (can be a simple tag component).
    - Create an `InputHandlingSystem` (or extend `MovementSystem`/existing input logic).
    - This system queries entities with `PlayerControlledComponent` and `VelocityComponent` (and potentially `PositionComponent`).
    - Based on `InputManager` actions (e.g., "MoveLeft", "MoveRight", "MoveUp", "MoveDown"), it sets the `VelocityComponent` of player-controlled entities. A speed factor/property might be needed in `PlayerControlledComponent` or another component.
- **Acceptance Criteria (ACs):**
    - AC1: `PlayerControlledComponent` is defined.
    - AC2: An entity with `PlayerControlledComponent` and `VelocityComponent` has its velocity changed based on configured input actions (e.g., WASD keys change velocity X/Y).
    - AC3: The entity moves on screen in response to player input.

### Story 7.4: Define ColliderComponent (Basic AABB)

- **User Story / Goal:** As the Primary Developer, I want to define a basic `ColliderComponent` (e.g., Axis-Aligned Bounding Box - AABB), so that entities can have a defined physical shape for collision detection.
- **Detailed Requirements:**
    - Create `ColliderComponent` (struct or class).
    - It should store dimensions (e.g., `Width`, `Height`) and an offset from the entity's `PositionComponent` (if the position is not the center of the collider).
    - It should provide a method to get the bounding rectangle (`RectangleF` or similar) in world space, given the entity's `PositionComponent`.
- **Acceptance Criteria (ACs):**
    - AC1: `ColliderComponent` is defined with width, height, and offset.
    - AC2: `ColliderComponent` can provide its world-space bounding box.
    - AC3: `ColliderComponent` can be added to Arch ECS entities.
    - AC4: (Optional visual debug) A system can draw the bounding boxes of colliders.

### Story 7.5: Implement Basic CollisionSystem (AABB vs AABB)

- **User Story / Goal:** As the Primary Developer, I want a basic `CollisionSystem` that detects intersections between entities with `ColliderComponent` (AABB vs AABB), so that basic physical interactions can occur.
- **Detailed Requirements:**
    - Create `CollisionSystem` class.
    - It should query all entities with `PositionComponent` and `ColliderComponent`.
    - In its `Update` method, it performs AABB intersection tests between pairs of relevant entities.
    - When a collision is detected, it should publish a collision event via `EventManager` (e.g., `CollisionEvent` with entity IDs involved) or store collision pairs for other systems to react to.
- **Acceptance Criteria (ACs):**
    - AC1: `CollisionSystem` correctly identifies when two AABB colliders are intersecting.
    - AC2: A `CollisionEvent` (or similar notification) is published via `EventManager` when a collision occurs, identifying the colliding entities.
    - AC3: In a test scene, two entities with colliders moving towards each other trigger a collision event when they overlap. (Reaction to collision is out of scope for this story).


================================================
File: docs/epics/epic8.md
================================================
# Epic 8: UI Manager (Basic) & Test Scene Parity (1-3)

**Goal:** Implement a basic `UIManager` for debug/test UI elements and ensure `test_scene.lua` through `test_scene3.lua` (from Peace Engine's `TASK.MD`) are fully ported to C# and functional using the Scarlet Engine, demonstrating the maturity of the ported managers and ECS.

## Story List

### Story 8.1: Implement Basic UIManager for Text Display

- **User Story / Goal:** As the Primary Developer, I want a basic `UIManager` that can render text elements on screen using a specific font, so that debug information or simple UI text can be displayed.
- **Detailed Requirements:**
    - Create a `UIManager` class.
    - It should be able to load `SpriteFont` assets via `AssetManager`.
    - Provide a method to draw text at a specified position, with a given string, font, and color (e.g., `DrawText(string text, Vector2 position, SpriteFont font, Color color)`).
    - Text rendering should occur on a designated UI layer (using `RenderManager`).
    - Add a test font to the Content Project.
    - `AssetManager` needs to be extended to load `SpriteFont`.
- **Acceptance Criteria (ACs):**
    - AC1: `AssetManager` can load `SpriteFont` assets.
    - AC2: `UIManager` can draw text on the screen at a specified position using a loaded font.
    - AC3: Text drawn by `UIManager` appears on top of other game elements (uses a UI layer).
    - AC4: A test scene displays "Hello World" using `UIManager`.

### Story 8.2: Port `test_scene.lua` Functionality

- **User Story / Goal:** As the Primary Developer, I want to fully port the functionality of Peace Engine's `test_scene.lua` to a C# `TestScene1` in Scarlet Engine, so that I can verify functional parity for the simplest test case.
- **Detailed Requirements:**
    - Review `test_scene.lua` from Peace Engine (likely involves simple sprite rendering, possibly basic input for exit).
    - Ensure `Scarlet.TestScene1` (from Epic 2) accurately replicates all behaviors and visuals of the original Lua scene.
    - Utilize already implemented managers (`AssetManager`, `SceneManager`, `InputManager`, `RenderManager`, `LogManager`, `ConfigManager`).
- **Acceptance Criteria (ACs):**
    - AC1: `TestScene1` in Scarlet Engine renders the same visual output as `test_scene.lua` in Peace Engine.
    - AC2: Any input handling (e.g., quit) in `test_scene.lua` is replicated in `TestScene1`.
    - AC3: All necessary assets are loaded correctly via `AssetManager`.

### Story 8.3: Port `test_scene2.lua` Functionality

- **User Story / Goal:** As the Primary Developer, I want to fully port the functionality of Peace Engine's `test_scene2.lua` (likely ECS-based sprite rendering) to `TestScene2` in Scarlet Engine, so that I verify ECS rendering parity.
- **Detailed Requirements:**
    - Review `test_scene2.lua` from Peace Engine.
    - Ensure `Scarlet.TestScene2` (from Epic 4) accurately replicates all behaviors and visuals.
    - This includes correct ECS entity setup, component assignment (`Position`, `Sprite`), and rendering via `RenderSystem`.
- **Acceptance Criteria (ACs):**
    - AC1: `TestScene2` in Scarlet Engine renders the same ECS-based visual output as `test_scene2.lua`.
    - AC2: Entity setup and component data match the original scene's intent.

### Story 8.4: Port `test_scene3.lua` Functionality (Platformer Test)

- **User Story / Goal:** As the Primary Developer, I want to fully port the functionality of Peace Engine's `test_scene3.lua` (platformer test with box player, walls, platforms, jump) to a C# `TestScene3` in Scarlet Engine, so that I verify core gameplay mechanics like movement, collision, and input in an interactive scenario.
- **Detailed Requirements:**
    - Review `test_scene3.lua` from Peace Engine `TASK.MD` (Milestone 5.4, 5.5).
    - Create `TestScene3` in Scarlet Engine.
    - Implement:
        - Player entity (box) with `Position`, `Velocity`, `Collider`, `PlayerControlled` components.
        - Static entities for floor, walls, platforms with `Position`, `Collider`.
        - Input handling for movement (left/right) and jump (e.g., spacebar).
        - Simple "arcadey" physics: gravity, applying jump force to velocity.
        - Collision response: stop movement on collision with walls/floor/platforms. Player should land on platforms.
        - Camera behavior if specified in the original test scene (e.g., static or simple follow).
        - Scene navigation (if part of original Milestones, ensure it can be switched to/from).
    - Utilize `MovementSystem`, `CollisionSystem`, `InputManager`, `EventManager`, `RenderSystem`.
- **Acceptance Criteria (ACs):**
    - AC1: `TestScene3` features a controllable box player that can move left/right and jump.
    - AC2: Player correctly collides with and lands on platforms and is constrained by walls/floor.
    - AC3: Visual output and core interactions mirror `test_scene3.lua`.
    - AC4: Jump mechanics feel responsive as described ("arcadey physics").


================================================
File: docs/epics/epic9.md
================================================
# Epic 9: `test_scene4.lua` (Shmup Prototype) Port & MVP Finalization

**Goal:** Complete the port of `test_scene4.lua` (shmup prototype) with all its functionalities, achieving MVP functional parity with Peace Engine's Milestone 4. This includes player movement, shooting, bullets, basic vertical scrolling if applicable, and any other core shmup mechanics present in that scene.

## Story List

### Story 9.1: Implement `test_scene4.lua` Core Player Shmup Mechanics

- **User Story / Goal:** As the Primary Developer, I want to port the core player mechanics from `test_scene4.lua` (shmup prototype) to a C# `TestScene4` in Scarlet Engine, including player sprite, movement (vertical and horizontal), and screen bounds.
- **Detailed Requirements:**
    - Review `test_scene4.lua` and `TASK.MD` (Milestone 5.6, 5.6.1) for detailed specifications.
    - Create `TestScene4` in Scarlet Engine.
    - Player entity:
        - Uses `space/player.png` sprite.
        - Has `Position`, `Velocity`, `Collider`, `PlayerControlled`, `Sprite` components.
        - Can move left/right/up/down via input actions.
        - Is bounded to the screen area (using sprite dimensions for boundary checks).
- **Acceptance Criteria (ACs):**
    - AC1: `TestScene4` displays the player sprite correctly.
    - AC2: Player can be moved in all four directions using mapped inputs.
    - AC3: Player movement is confined within the screen boundaries.
    - AC4: Player sprite's actual dimensions are used for boundary collision.

### Story 9.2: Implement Player Shooting Mechanics from `test_scene4.lua`

- **User Story / Goal:** As the Primary Developer, I want to port the player shooting mechanics from `test_scene4.lua` to `TestScene4`, including bullet creation, movement, and despawning.
- **Detailed Requirements:**
    - Player can shoot bullets (e.g., on "Fire" action, spacebar).
    - Bullets:
        - Use `space/laserRed.png` sprite.
        - Are entities with `Position`, `Velocity`, `Collider`, `Sprite` components.
        - Spawn from the player's position (or a defined fire point).
        - Move upwards with a constant velocity.
        - Are removed/despawned when they leave the screen.
- **Acceptance Criteria (ACs):**
    - AC1: Pressing the "Fire" action (spacebar) spawns a bullet entity.
    - AC2: Bullet entities use the correct laser sprite and move upwards.
    - AC3: Bullets are correctly removed when they go off-screen.
    - AC4: Bullet spawning position is relative to the player.

### Story 9.3: Implement Remaining `test_scene4.lua` Features (Enemies, Scoring, etc. if any)

- **User Story / Goal:** As the Primary Developer, I want to port any remaining features from `test_scene4.lua` (e.g., basic enemy spawning/movement, collision between bullets and enemies, simple scoring display if present in the original Milestone 4 scope) to `TestScene4`, so that it fully matches the original prototype's functionality.
- **Detailed Requirements:**
    - Thoroughly review `test_scene4.lua` and associated `TASK.MD` documentation for any other functionalities defined within the Milestone 4 scope for this scene.
    - This might include:
        - Simple enemy entities (if any) with basic movement patterns.
        - Collision detection between player bullets and enemies.
        - Collision detection between player and enemies.
        - Removal of enemies and bullets upon collision.
        - Basic UI display for score or lives, using `UIManager` (if any).
        - Vertical scrolling of the background/play area (if any).
- **Acceptance Criteria (ACs):**
    - AC1: All documented functionalities of `test_scene4.lua` from Peace Engine's Milestone 4 are replicated in Scarlet Engine's `TestScene4`.
    - AC2: (If applicable) Basic enemies spawn and move as defined.
    - AC3: (If applicable) Collisions between bullets and enemies are detected, and both are removed.
    - AC4: (If applicable) Player collisions with enemies are handled as defined.
    - AC5: (If applicable) Any UI elements like score are displayed correctly.

### Story 9.4: Final MVP Validation and Refinement

- **User Story / Goal:** As the Primary Developer, I want to perform a final validation of all ported test scenes (`TestScene1` through `TestScene4`) against their original Lua counterparts and refine any discrepancies, so that the MVP goal of functional parity with Peace Engine Milestone 4 is met.
- **Detailed Requirements:**
    - Systematically test `TestScene1`, `TestScene2`, `TestScene3`, and `TestScene4` in Scarlet Engine.
    - Compare behavior, visuals, and interactions against the original Peace Engine versions (or their documented specifications if direct comparison is difficult).
    - Identify and fix any bugs, missing features, or incorrect behaviors.
    - Ensure all core managers and ECS components/systems are functioning as expected across all test scenes.
    - Confirm the engine runs on all target platforms (Windows, Linux, macOS).
- **Acceptance Criteria (ACs):**
    - AC1: `TestScene1` through `TestScene4` in Scarlet Engine demonstrate functional parity with their respective original Lua versions as defined by Peace Engine's `TASK.MD` up to Milestone 4.
    - AC2: No critical bugs or major visual/functional discrepancies are present in the ported test scenes.
    - AC3: The Scarlet Engine project builds and runs successfully on Windows, Linux, and macOS.
    - AC4: The primary developer confirms the MVP goals as stated in the PRD have been achieved.


================================================
File: .config/dotnet-tools.json
================================================
{
  "version": 1,
  "isRoot": true,
  "tools": {
    "dotnet-mgcb": {
      "version": "3.8.3",
      "commands": [
        "mgcb"
      ]
    },
    "dotnet-mgcb-editor": {
      "version": "3.8.3",
      "commands": [
        "mgcb-editor"
      ]
    },
    "dotnet-mgcb-editor-linux": {
      "version": "3.8.3",
      "commands": [
        "mgcb-editor-linux"
      ]
    },
    "dotnet-mgcb-editor-windows": {
      "version": "3.8.3",
      "commands": [
        "mgcb-editor-windows"
      ]
    },
    "dotnet-mgcb-editor-mac": {
      "version": "3.8.3",
      "commands": [
        "mgcb-editor-mac"
      ]
    }
  }
}



================================================
File: .github/CODEOWNERS
================================================
# This is a CODEOWNERS file.
#
# Lines starting with '#' are comments.
# Each line is a file pattern followed by one or more owners.
# These patterns follow the same rules as .gitignore.
#
# Owners can be:
# - A GitHub username (e.g., @octocat)
# - A GitHub team name (e.g., @my-org/my-team)
# - An email address (e.g., user@example.com)
#
# Order matters: the last matching pattern takes the most precedence.
#
# Example:
# *       @global-owner1 @global-owner2  # All files are owned by these users/teams
# *.js    @js-owner                      # .js files are owned by @js-owner
# /docs/  docs@example.com               # Files in the /docs/ directory are owned by docs@example.com

# All files in the repository are owned by nightconcept
* @nightconcept dark@nightconcept.net

# You can add more specific rules below if needed.
# For example, if different parts of the project have different owners:
#
# /cmd/      @nightconcept
# /internal/ @nightconcept
# /scripts/  dark@nightconcept.net



================================================
File: .github/copilot-instructions.md
================================================
# AI Project Guidelines (Condensed)

**Objective:** Define mandatory process, coding, testing, and interaction standards for AI assistance.

## 1. Preparation

* **Project Context (Session Start):** ALWAYS review key project docs: `docs/PRD.md` (architecture, goals, tech stack, versions, structure, style guide), `docs/digest.txt` (current state summary), `docs/TASKS.md` (assignments).
* **Task Prep (Before Work):**
    * ALWAYS consult `docs/TASKS.md` for your assignment. If missing, add it (concise description, `YYYY-MM-DD`).
    * ALWAYS review relevant existing code *before* suggesting changes.

## 2. Implementation Planning

**Present this plan before providing code for a task:**

* Problem description (brief).
* Solution overview (high-level).
* Implementation steps (list).
* Risks/Challenges (foreseen).

## 3. Development Workflow

* **Plan First:** Present plan (Sec 2) before coding.
* **Focus:** Target the specific task from `TASKS.md`. No unrelated refactoring unless tasked.
* **Modification Approach:**
    * Prioritize minimal, incremental, clean, elegant, idiomatic changes.
    * Explain significant suggestions (Sec 5.4).
    * Propose beneficial low-risk refactoring.
    * Avoid duplication; use helpers/modules.
    * Explain use of language strengths/pitfalls if relevant.
* **Dependencies:** No new/updated external dependencies without explicit maintainer approval (check `docs/PRD.md` for approved stack/versions). Use only approved dependencies.
* **Commits (User Task):** Follow Conventional Commits (`https://www.conventionalcommits.org/en/v1.0.0/`).
* **Manual Testing:** Provide clear user instructions for manually testing the task's changes.

## 4. Folder Structure

* **Strict Adherence:** Follow structure defined in `docs/PRD.md`.
* **Changes:** No adding/removing/relocating files/dirs without prior maintainer approval. Approved structure changes require updating `docs/PRD.md` *before* implementation.
* **Source Location:** All source code must be in `src/`.
* **Precedence:** This rule is foundational.

## 5. Coding Standards

### 5.1. General & Robustness

* Follow language best practices unless overridden by `docs/PRD.md` or these guidelines.
* Prioritize: Clarity, maintainability, efficiency.
* Consider performance & basic security.
* Implement robust error handling (language norms or `PRD.md` spec); handle errors gracefully.

### 5.2. Modularity & Structure

* Keep files focused (ideally < 500 lines); refactor large ones.
* Prefer small, single-purpose functions.
* Structure code logically (per `docs/PRD.md`) into modules.
* Use clear, consistent imports (relative for local packages). Verify paths.

### 5.3. Style & Formatting

* **Priority:** 1) `docs/PRD.md`, 2) These rules, 3) Language common practices.
* **Type Hinting:** Mandatory for functions/classes/modules (dynamic languages).
* **Indentation:** 2 spaces.
* **Function Calls:** No space: `func()` not `func ()`.
* **Line Structure:** Avoid collapsing statements if clarity suffers.
* **Scope:** Default local. More descriptive names for wider scope. Avoid single-letter vars (except iterators/tiny scope; `i` only for loops). Use `_` for ignored vars.
* **Casing:** Match current file style; else language common style. `UPPER_CASE` for constants only.
* **Booleans:** Prefer `is_` prefix for boolean functions.
* **File Headers:** Top comment: Title (descriptive, not filename) + brief purpose. No version/OS info.

### 5.4. Documentation & Comments

* **Docstrings:** Required for public functions, classes, modules (standard format).
* **Code Comments:** Explain non-obvious logic, complex algorithms, decisions (*why*, not *what*).
* **Reasoning Comments:** Use `# Reason:` for complex block rationale.
* **README Updates:** Update `docs/README.md` for core features, dependency changes, or setup/build modifications.

## 6. Testing

* **Goal:** Tests are living documentation specifying behavior. Use common language framework.
* **Behavior Specification:** Tests specify behavior. Type/scope/timing (e.g., E2E, Unit, Integration) defined in `docs/PRD.md` per project phase.
* **Location:** Place tests in `/src/test` (Lua: `/src/spec`), mirroring `src/` structure (Sec 4).
    * Ex: Tests for `src/engine/mod.js` -> `src/test/engine/mod_test.js`.
    * Ex: Lua spec for `src/engine/mod.lua` -> `src/spec/engine/mod_spec.lua`.
* **Content:** Tests clearly describe expected behavior per `PRD.md` goals for the current phase.
    * **Prototype Phase:** Primary focus on automated E2E tests validating core functionality.
* **Strategy & Coverage:** Defined in `PRD.md`, evolves with phases.
    * **Prototype Phase:** E2E priority. Comprehensive unit tests & code coverage metrics (e.g., 100% statement coverage) are **not** the focus *unless* specified in `docs/PRD.md` for a later phase demanding them.
* **Updating Tests:** Review/update tests with code changes to reflect *current* expected behavior. Fix failing/outdated tests promptly.

## 7. AI Interaction Protocols

### 7.1. Engineering Role & Audience

* **Role:** Act as a **Senior Software Engineer**.
* **Audience:** Target **Mid-Level Software Engineers** (code = best practices, clear, documented; explanations thorough; justify complex choices).

### 7.2. Interaction Guidelines

* Ask clarifying questions if needed; do not assume.
* Verify facts (libs, APIs, file paths); do not invent. Use MCP servers if available.
* Do not delete/overwrite code unless instructed or part of the defined task.
* Report significant blockers/errors *during* implementation promptly with context and suggestions.
* If a task seems complex, state potential benefit from a more advanced model **boldly** at the start (e.g., "**Suggestion: This complex refactoring might benefit from a more advanced model.**").
* Be friendly, helpful, collaborative.
* Explicitly state when task requirements are met. Mark task complete in `docs/TASKS.md`.



================================================
File: .github/dependabot.yml
================================================
version: 2
updates:
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      # Check for updates to GitHub Actions every week
      interval: "weekly"

  - package-ecosystem: gomod
    directory: /
    schedule:
      interval: daily



================================================
File: .github/deactivated/ci.yml
================================================
name: Go CI
permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test on Go ${{ matrix.go-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.24' ]
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 2

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install Go tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install github.com/mattn/goveralls@latest

      - name: Download Go modules
        run: |
          go mod download
          go mod verify

      - name: Run govulncheck
        uses: golang/govulncheck-action@b625fbe08f3bccbe446d94fbf87fcc875a4f50ee # v1.0.4

      - name: Lint source
        run: golangci-lint run ./...

      - name: Run tests with coverage
        run: go test -v ./... -race -coverprofile=coverage.out -covermode=atomic

      - name: Upload coverage to Coveralls
        if: matrix.go-version == '1.24' # Only upload from one Go version
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          goveralls -coverprofile=coverage.out -service=github -repotoken $COVERALLS_TOKEN



================================================
File: .github/deactivated/codeql.yml
================================================
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: ["main"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: ["main"]
  schedule:
    - cron: "0 0 * * 1"

permissions:
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["go"]
        # CodeQL supports [ $supported-codeql-languages ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo "Run, Build Application using script"
      #   ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
        with:
          category: "/language:${{matrix.language}}"



================================================
File: .github/deactivated/dependency-review.yml
================================================
# Dependency Review Action
#
# This Action will scan dependency manifest files that change as part of a Pull Request,
# surfacing known-vulnerable versions of the packages declared or updated in the PR.
# Once installed, if the workflow run is marked as required,
# PRs introducing known-vulnerable packages will be blocked from merging.
#
# Source repository: https://github.com/actions/dependency-review-action
name: 'Dependency Review'
on: [pull_request]

permissions:
  contents: read

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: 'Checkout Repository'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@38ecb5b593bf0eb19e335c03f97670f792489a8b # v4.7.0



================================================
File: .github/deactivated/release.yml
================================================
name: Create Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Type of version bump (alpha, beta, rc, promote_to_final, patch, minor, major)"
        required: true
        default: "alpha"
        type: choice
        options:
          - alpha
          - beta
          - rc
          - promote_to_final
          - patch
          - minor
          - major
      draft_release:
        description: "Create as a draft release?"
        required: true
        default: "false"
        type: boolean

permissions:
  contents: read

jobs:
  determine_version:
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.get_version.outputs.next_version }}
      is_prerelease: ${{ steps.get_version.outputs.is_prerelease }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Required to fetch all tags

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install semver

      - name: Determine next version
        id: get_version
        env:
          BUMP_TYPE: ${{ github.event.inputs.bump_type }}
        run: python .github/scripts/determine_next_version.py

  build_and_release:
    needs: determine_version
    if: needs.determine_version.outputs.next_version != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create releases and tags
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude: # Add exclusions if some combinations are not needed/supported
          - goos: windows
            goarch: arm64 # Example: if windows arm64 is not a target

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: '1.21' # As per PRD

      - name: Set version output
        id: version_output
        run: |
          echo "NEXT_VERSION=${{ needs.determine_version.outputs.next_version }}" >> $GITHUB_ENV
          echo "IS_PRERELEASE=${{ needs.determine_version.outputs.is_prerelease }}" >> $GITHUB_ENV

      - name: Build application
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ env.NEXT_VERSION }}
        run: |
          echo "Building for $GOOS/$GOARCH with version $VERSION"
          BINARY_NAME="almd"
          if [ "$GOOS" == "windows" ]; then
            BINARY_NAME="almd.exe"
          fi
          go build -v -o $BINARY_NAME -ldflags="-X 'main.version=$VERSION'" ./cmd/almd
          ls -la $BINARY_NAME # Verify binary exists

      - name: Archive binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION_NO_V: ${{ env.NEXT_VERSION }} # Assuming NEXT_VERSION has 'v' prefix
        run: |
          VERSION_TAG=${VERSION_NO_V#v} # Remove 'v' prefix for filename
          ARCHIVE_NAME="almd_${VERSION_TAG}_${GOOS}_${GOARCH}"
          BINARY_NAME="almd"
          if [ "$GOOS" == "windows" ]; then
            BINARY_NAME="almd.exe"
            zip "${ARCHIVE_NAME}.zip" $BINARY_NAME
            echo "ASSET_NAME=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
            echo "ASSET_PATH=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czvf "${ARCHIVE_NAME}.tar.gz" $BINARY_NAME
            echo "ASSET_NAME=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
            echo "ASSET_PATH=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          fi
          ls -la $ASSET_PATH # Verify archive exists

      - name: Upload artifact for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: almd-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.ASSET_PATH }}

  create_release_tag:
    needs: [determine_version, build_and_release] # Ensure build_and_release completes for all platforms
    runs-on: ubuntu-latest
    if: needs.determine_version.outputs.next_version != ''
    permissions:
      contents: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Create Git Tag
        env:
          NEXT_VERSION: ${{ needs.determine_version.outputs.next_version }}
        run: |
          echo "Creating tag $NEXT_VERSION"
          git tag $NEXT_VERSION
          git push origin $NEXT_VERSION

      - name: Download all artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: release-artifacts # Download all artifacts to this directory
          # No specific name means download all artifacts from the run

      - name: List downloaded artifacts
        run: |
          ls -R release-artifacts

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.determine_version.outputs.next_version }}
          name: Release ${{ needs.determine_version.outputs.next_version }}
          body: |
            Automated release for version ${{ needs.determine_version.outputs.next_version }}.
            See CHANGELOG.md for details (if available).
          draft: ${{ github.event.inputs.draft_release == 'true' }}
          prerelease: ${{ needs.determine_version.outputs.is_prerelease == 'true' }}
          files: |
            release-artifacts/almd-binaries-linux-amd64/*.tar.gz
            release-artifacts/almd-binaries-linux-arm64/*.tar.gz
            release-artifacts/almd-binaries-windows-amd64/*.zip
            release-artifacts/almd-binaries-darwin-amd64/*.tar.gz
            release-artifacts/almd-binaries-darwin-arm64/*.tar.gz



================================================
File: .github/deactivated/scorecard.yml
================================================
# This workflow uses actions that are not certified by GitHub. They are provided
# by a third-party and are governed by separate terms of service, privacy
# policy, and support documentation.

name: Scorecard supply-chain security
on:
  # For Branch-Protection check. Only the default branch is supported. See
  # https://github.com/ossf/scorecard/blob/main/docs/checks.md#branch-protection
  branch_protection_rule:
  # To guarantee Maintained check is occasionally updated. See
  # https://github.com/ossf/scorecard/blob/main/docs/checks.md#maintained
  schedule:
    - cron: '26 19 * * 2'
  push:
    branches: [ "main" ]

# Declare default permissions as read only.
permissions: read-all

jobs:
  analysis:
    name: Scorecard analysis
    runs-on: ubuntu-latest
    # `publish_results: true` only works when run from the default branch. conditional can be removed if disabled.
    if: github.event.repository.default_branch == github.ref_name || github.event_name == 'pull_request'
    permissions:
      # Needed to upload the results to code-scanning dashboard.
      security-events: write
      # Needed to publish results and get a badge (see publish_results below).
      id-token: write
      # Uncomment the permissions below if installing in a private repository.
      # contents: read
      # actions: read

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: "Checkout code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: "Run analysis"
        uses: ossf/scorecard-action@f49aabe0b5af0936a0987cfb85d86b75731b0186 # v2.4.1
        with:
          results_file: results.sarif
          results_format: sarif
          # (Optional) "write" PAT token. Uncomment the `repo_token` line below if:
          # - you want to enable the Branch-Protection check on a *public* repository, or
          # - you are installing Scorecard on a *private* repository
          # To create the PAT, follow the steps in https://github.com/ossf/scorecard-action?tab=readme-ov-file#authentication-with-fine-grained-pat-optional.
          # repo_token: ${{ secrets.SCORECARD_TOKEN }}

          # Public repositories:
          #   - Publish results to OpenSSF REST API for easy access by consumers
          #   - Allows the repository to include the Scorecard badge.
          #   - See https://github.com/ossf/scorecard-action#publishing-results.
          # For private repositories:
          #   - `publish_results` will always be set to `false`, regardless
          #     of the value entered here.
          publish_results: true

          # (Optional) Uncomment file_mode if you have a .gitattributes with files marked export-ignore
          # file_mode: git

      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF
      # format to the repository Actions tab.
      - name: "Upload artifact"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      # Upload the results to GitHub's code scanning dashboard (optional).
      # Commenting out will disable upload of results to your repo's Code Scanning dashboard
      - name: "Upload to code-scanning"
        uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
        with:
          sarif_file: results.sarif



================================================
File: .github/scripts/determine_next_version.py
================================================
import os
import subprocess
import semver
import sys

def get_tags():
    try:
        result = subprocess.run(['git', 'tag', '-l', 'v*', '--sort=v:refname'], capture_output=True, text=True, check=True)
        tags = result.stdout.strip().split('\n')
        return [tag for tag in tags if tag] # Filter out empty strings if any
    except subprocess.CalledProcessError as e:
        print(f"Error fetching tags: {e}", file=sys.stderr)
        return []

def get_latest_semver(tags):
    latest_v = None
    for tag_str in reversed(tags): # Iterate from newest to oldest based on git sort
        try:
            v = semver.VersionInfo.parse(tag_str[1:]) # Remove 'v' prefix
            if latest_v is None or v > latest_v:
                latest_v = v
        except ValueError:
            # Not a valid semver tag, skip
            continue
    return latest_v

def get_latest_prerelease_for_base(tags, base_version, token):
    """
    Finds the latest prerelease tag for a given base version and token.
    Example: base_version = 0.2.0, token = 'alpha' -> finds latest v0.2.0-alpha.N
    Returns a semver.VersionInfo object or None.
    """
    latest_prerelease_v = None
    for tag_str in reversed(tags): # Assumes tags are sorted v:refname
        try:
            v = semver.VersionInfo.parse(tag_str[1:])
            if v.major == base_version.major and \
               v.minor == base_version.minor and \
               v.patch == base_version.patch and \
               v.prerelease and len(v.prerelease) == 2 and v.prerelease[0] == token:
                # Compare numeric part of the prerelease
                if latest_prerelease_v is None or v.prerelease[1] > latest_prerelease_v.prerelease[1]:
                    latest_prerelease_v = v
        except ValueError:
            # Not a valid semver tag or unexpected prerelease format
            continue
        except TypeError:
            # Handle cases where prerelease[1] might not be comparable (e.g., not an int)
            print(f"Warning: Prerelease part of tag {tag_str} is not as expected for comparison.", file=sys.stderr)
            continue
    return latest_prerelease_v

def main():
    bump_type = os.environ.get('BUMP_TYPE')
    if not bump_type:
        print("Error: BUMP_TYPE environment variable not set.", file=sys.stderr)
        sys.exit(1)

    tags = get_tags()
    latest_v = get_latest_semver(tags)

    next_v_str = ""
    is_prerelease = "true"

    if not latest_v:
        if bump_type == 'alpha':
            next_v = semver.VersionInfo(0, 2, 0, prerelease='alpha.1')
            # Check for existing tags and bump if necessary
            temp_next_v_tag = f"v{str(next_v)}"
            while temp_next_v_tag in tags: # 'tags' contains all existing v* tags
                next_v = next_v.bump_prerelease(token='alpha')
                temp_next_v_tag = f"v{str(next_v)}"
            next_v_str = str(next_v)
        else:
            print(f"Error: No existing tags found. Initial bump must be 'alpha' to start with 0.2.0-alpha.1.", file=sys.stderr)
            sys.exit(1)
    else:
        current_v = latest_v
        if bump_type == 'alpha':
            if current_v.prerelease and current_v.prerelease[0] == 'alpha':
                next_v = current_v.bump_prerelease(token='alpha')
            else: # New alpha series for current major.minor.patch or next patch
                # If current is final (e.g. 0.1.0), new alpha is 0.1.0-alpha.1
                # If current is rc (e.g. 0.1.0-rc.1), new alpha is 0.1.0-alpha.1
                # If current is beta (e.g. 0.1.0-beta.1), new alpha is 0.1.0-alpha.1
                next_v = semver.VersionInfo(current_v.major, current_v.minor, current_v.patch, prerelease='alpha.1')

            # Check for existing tags and bump if necessary
            temp_next_v_tag = f"v{str(next_v)}"
            while temp_next_v_tag in tags:
                next_v = next_v.bump_prerelease(token='alpha') # Bumps 'alpha.1' to 'alpha.2', etc.
                temp_next_v_tag = f"v{str(next_v)}"
            next_v_str = str(next_v)
        elif bump_type == 'beta':
            if current_v.prerelease and current_v.prerelease[0] == 'beta':
                next_v = current_v.bump_prerelease(token='beta')
            else: # New beta series, must come from alpha or be a new beta for a version
                # e.g., 0.1.0-alpha.2 -> 0.1.0-beta.1
                next_v = semver.VersionInfo(current_v.major, current_v.minor, current_v.patch, prerelease='beta.1')

            # Check for existing tags and bump if necessary
            temp_next_v_tag = f"v{str(next_v)}"
            while temp_next_v_tag in tags:
                next_v = next_v.bump_prerelease(token='beta')
                temp_next_v_tag = f"v{str(next_v)}"
            next_v_str = str(next_v)
        elif bump_type == 'rc':
            if current_v.prerelease and current_v.prerelease[0] == 'rc':
                next_v = current_v.bump_prerelease(token='rc')
            else: # New RC series
                next_v = semver.VersionInfo(current_v.major, current_v.minor, current_v.patch, prerelease='rc.1')

            # Check for existing tags and bump if necessary
            temp_next_v_tag = f"v{str(next_v)}"
            while temp_next_v_tag in tags:
                next_v = next_v.bump_prerelease(token='rc')
                temp_next_v_tag = f"v{str(next_v)}"
            next_v_str = str(next_v)
        elif bump_type == 'promote_to_final':
            if not current_v.prerelease:
                print(f"Error: Version {current_v} is already final. Cannot promote.", file=sys.stderr)
                sys.exit(1)
            next_v = current_v.finalize_version()
            next_v_str = str(next_v)
            is_prerelease = "false"
        elif bump_type == 'patch':
            # For patch, minor, major, we always bump from the finalized version of the *overall* latest tag.
            base_v = current_v.finalize_version()
            next_v = base_v.bump_patch()
            next_v_str = str(next_v)
            is_prerelease = "false"
        elif bump_type == 'minor':
            base_v = current_v.finalize_version()
            next_v = base_v.bump_minor()
            next_v_str = str(next_v)
            is_prerelease = "false"
        elif bump_type == 'major':
            base_v = current_v.finalize_version()
            next_v = base_v.bump_major()
            next_v_str = str(next_v)
            is_prerelease = "false"
        else:
            print(f"Error: Unknown BUMP_TYPE '{bump_type}'", file=sys.stderr)
            sys.exit(1)

    if not next_v_str.startswith('v'):
        next_v_tag = f"v{next_v_str}"
    else:
        next_v_tag = next_v_str


    print(f"Calculated next version: {next_v_tag}", file=sys.stderr)
    print(f"::set-output name=next_version::{next_v_tag}")
    print(f"::set-output name=is_prerelease::{is_prerelease}")

if __name__ == "__main__":
    main()




